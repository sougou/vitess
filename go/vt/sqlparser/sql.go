// Code generated by goyacc -l -o sql.go sql.y. DO NOT EDIT.
package sqlparser

import __yyfmt__ "fmt"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

type yySymType struct {
	yys int
	val interface{}
}

func (st *yySymType) empty() struct{} {
	v, _ := st.val.(struct{})
	return v
}

func (st *yySymType) statement() Statement {
	v, _ := st.val.(Statement)
	return v
}

func (st *yySymType) selStmt() SelectStatement {
	v, _ := st.val.(SelectStatement)
	return v
}

func (st *yySymType) ddl() *DDL {
	v, _ := st.val.(*DDL)
	return v
}

func (st *yySymType) ins() *Insert {
	v, _ := st.val.(*Insert)
	return v
}

func (st *yySymType) byt() byte {
	v, _ := st.val.(byte)
	return v
}

func (st *yySymType) bytes() []byte {
	v, _ := st.val.([]byte)
	return v
}

func (st *yySymType) bytes2() [][]byte {
	v, _ := st.val.([][]byte)
	return v
}

func (st *yySymType) str() string {
	v, _ := st.val.(string)
	return v
}

func (st *yySymType) strs() []string {
	v, _ := st.val.([]string)
	return v
}

func (st *yySymType) selectExprs() SelectExprs {
	v, _ := st.val.(SelectExprs)
	return v
}

func (st *yySymType) selectExpr() SelectExpr {
	v, _ := st.val.(SelectExpr)
	return v
}

func (st *yySymType) columns() Columns {
	v, _ := st.val.(Columns)
	return v
}

func (st *yySymType) partitions() Partitions {
	v, _ := st.val.(Partitions)
	return v
}

func (st *yySymType) colName() *ColName {
	v, _ := st.val.(*ColName)
	return v
}

func (st *yySymType) tableExprs() TableExprs {
	v, _ := st.val.(TableExprs)
	return v
}

func (st *yySymType) tableExpr() TableExpr {
	v, _ := st.val.(TableExpr)
	return v
}

func (st *yySymType) joinCondition() JoinCondition {
	v, _ := st.val.(JoinCondition)
	return v
}

func (st *yySymType) tableName() TableName {
	v, _ := st.val.(TableName)
	return v
}

func (st *yySymType) tableNames() TableNames {
	v, _ := st.val.(TableNames)
	return v
}

func (st *yySymType) indexHints() *IndexHints {
	v, _ := st.val.(*IndexHints)
	return v
}

func (st *yySymType) expr() Expr {
	v, _ := st.val.(Expr)
	return v
}

func (st *yySymType) exprs() Exprs {
	v, _ := st.val.(Exprs)
	return v
}

func (st *yySymType) boolVal() BoolVal {
	v, _ := st.val.(BoolVal)
	return v
}

func (st *yySymType) colTuple() ColTuple {
	v, _ := st.val.(ColTuple)
	return v
}

func (st *yySymType) values() Values {
	v, _ := st.val.(Values)
	return v
}

func (st *yySymType) valTuple() ValTuple {
	v, _ := st.val.(ValTuple)
	return v
}

func (st *yySymType) subquery() *Subquery {
	v, _ := st.val.(*Subquery)
	return v
}

func (st *yySymType) whens() []*When {
	v, _ := st.val.([]*When)
	return v
}

func (st *yySymType) when() *When {
	v, _ := st.val.(*When)
	return v
}

func (st *yySymType) orderBy() OrderBy {
	v, _ := st.val.(OrderBy)
	return v
}

func (st *yySymType) order() *Order {
	v, _ := st.val.(*Order)
	return v
}

func (st *yySymType) limit() *Limit {
	v, _ := st.val.(*Limit)
	return v
}

func (st *yySymType) updateExprs() UpdateExprs {
	v, _ := st.val.(UpdateExprs)
	return v
}

func (st *yySymType) setExprs() SetExprs {
	v, _ := st.val.(SetExprs)
	return v
}

func (st *yySymType) updateExpr() *UpdateExpr {
	v, _ := st.val.(*UpdateExpr)
	return v
}

func (st *yySymType) setExpr() *SetExpr {
	v, _ := st.val.(*SetExpr)
	return v
}

func (st *yySymType) colIdent() ColIdent {
	v, _ := st.val.(ColIdent)
	return v
}

func (st *yySymType) tableIdent() TableIdent {
	v, _ := st.val.(TableIdent)
	return v
}

func (st *yySymType) convertType() *ConvertType {
	v, _ := st.val.(*ConvertType)
	return v
}

func (st *yySymType) aliasedTableName() *AliasedTableExpr {
	v, _ := st.val.(*AliasedTableExpr)
	return v
}

func (st *yySymType) TableSpec() *TableSpec {
	v, _ := st.val.(*TableSpec)
	return v
}

func (st *yySymType) columnType() ColumnType {
	v, _ := st.val.(ColumnType)
	return v
}

func (st *yySymType) colKeyOpt() ColumnKeyOption {
	v, _ := st.val.(ColumnKeyOption)
	return v
}

func (st *yySymType) optVal() *SQLVal {
	v, _ := st.val.(*SQLVal)
	return v
}

func (st *yySymType) LengthScaleOption() LengthScaleOption {
	v, _ := st.val.(LengthScaleOption)
	return v
}

func (st *yySymType) columnDefinition() *ColumnDefinition {
	v, _ := st.val.(*ColumnDefinition)
	return v
}

func (st *yySymType) indexDefinition() *IndexDefinition {
	v, _ := st.val.(*IndexDefinition)
	return v
}

func (st *yySymType) indexInfo() *IndexInfo {
	v, _ := st.val.(*IndexInfo)
	return v
}

func (st *yySymType) indexOption() *IndexOption {
	v, _ := st.val.(*IndexOption)
	return v
}

func (st *yySymType) indexOptions() []*IndexOption {
	v, _ := st.val.([]*IndexOption)
	return v
}

func (st *yySymType) indexColumn() *IndexColumn {
	v, _ := st.val.(*IndexColumn)
	return v
}

func (st *yySymType) indexColumns() []*IndexColumn {
	v, _ := st.val.([]*IndexColumn)
	return v
}

func (st *yySymType) constraintDefinition() *ConstraintDefinition {
	v, _ := st.val.(*ConstraintDefinition)
	return v
}

func (st *yySymType) constraintInfo() ConstraintInfo {
	v, _ := st.val.(ConstraintInfo)
	return v
}

func (st *yySymType) ReferenceAction() ReferenceAction {
	v, _ := st.val.(ReferenceAction)
	return v
}

func (st *yySymType) partDefs() []*PartitionDefinition {
	v, _ := st.val.([]*PartitionDefinition)
	return v
}

func (st *yySymType) partDef() *PartitionDefinition {
	v, _ := st.val.(*PartitionDefinition)
	return v
}

func (st *yySymType) partSpec() *PartitionSpec {
	v, _ := st.val.(*PartitionSpec)
	return v
}

func (st *yySymType) vindexParam() VindexParam {
	v, _ := st.val.(VindexParam)
	return v
}

func (st *yySymType) vindexParams() []VindexParam {
	v, _ := st.val.([]VindexParam)
	return v
}

func (st *yySymType) showFilter() *ShowFilter {
	v, _ := st.val.(*ShowFilter)
	return v
}

func (st *yySymType) optLike() *OptLike {
	v, _ := st.val.(*OptLike)
	return v
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const UNDERSCORE_UTF8MB4 = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const KEY_BLOCK_SIZE = 57457
const ACTION = 57458
const CASCADE = 57459
const CONSTRAINT = 57460
const FOREIGN = 57461
const NO = 57462
const REFERENCES = 57463
const RESTRICT = 57464
const SHOW = 57465
const DESCRIBE = 57466
const EXPLAIN = 57467
const DATE = 57468
const ESCAPE = 57469
const REPAIR = 57470
const OPTIMIZE = 57471
const TRUNCATE = 57472
const MAXVALUE = 57473
const PARTITION = 57474
const REORGANIZE = 57475
const LESS = 57476
const THAN = 57477
const PROCEDURE = 57478
const TRIGGER = 57479
const VINDEX = 57480
const VINDEXES = 57481
const STATUS = 57482
const VARIABLES = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const BIT = 57489
const TINYINT = 57490
const SMALLINT = 57491
const MEDIUMINT = 57492
const INT = 57493
const INTEGER = 57494
const BIGINT = 57495
const INTNUM = 57496
const REAL = 57497
const DOUBLE = 57498
const FLOAT_TYPE = 57499
const DECIMAL = 57500
const NUMERIC = 57501
const TIME = 57502
const TIMESTAMP = 57503
const DATETIME = 57504
const YEAR = 57505
const CHAR = 57506
const VARCHAR = 57507
const BOOL = 57508
const CHARACTER = 57509
const VARBINARY = 57510
const NCHAR = 57511
const TEXT = 57512
const TINYTEXT = 57513
const MEDIUMTEXT = 57514
const LONGTEXT = 57515
const BLOB = 57516
const TINYBLOB = 57517
const MEDIUMBLOB = 57518
const LONGBLOB = 57519
const JSON = 57520
const ENUM = 57521
const GEOMETRY = 57522
const POINT = 57523
const LINESTRING = 57524
const POLYGON = 57525
const GEOMETRYCOLLECTION = 57526
const MULTIPOINT = 57527
const MULTILINESTRING = 57528
const MULTIPOLYGON = 57529
const NULLX = 57530
const AUTO_INCREMENT = 57531
const APPROXNUM = 57532
const SIGNED = 57533
const UNSIGNED = 57534
const ZEROFILL = 57535
const COLLATION = 57536
const DATABASES = 57537
const TABLES = 57538
const VITESS_KEYSPACES = 57539
const VITESS_SHARDS = 57540
const VITESS_TABLETS = 57541
const VSCHEMA_TABLES = 57542
const VITESS_TARGET = 57543
const FULL = 57544
const PROCESSLIST = 57545
const COLUMNS = 57546
const NAMES = 57547
const CHARSET = 57548
const GLOBAL = 57549
const SESSION = 57550
const ISOLATION = 57551
const LEVEL = 57552
const READ = 57553
const WRITE = 57554
const ONLY = 57555
const REPEATABLE = 57556
const COMMITTED = 57557
const UNCOMMITTED = 57558
const SERIALIZABLE = 57559
const CURRENT_TIMESTAMP = 57560
const DATABASE = 57561
const CURRENT_DATE = 57562
const CURRENT_TIME = 57563
const LOCALTIME = 57564
const LOCALTIMESTAMP = 57565
const UTC_DATE = 57566
const UTC_TIME = 57567
const UTC_TIMESTAMP = 57568
const REPLACE = 57569
const CONVERT = 57570
const CAST = 57571
const SUBSTR = 57572
const SUBSTRING = 57573
const GROUP_CONCAT = 57574
const SEPARATOR = 57575
const MATCH = 57576
const AGAINST = 57577
const BOOLEAN = 57578
const LANGUAGE = 57579
const WITH = 57580
const QUERY = 57581
const EXPANSION = 57582
const UNUSED = 57583

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 36,
	157, 284,
	158, 284,
	-2, 276,
	-1, 253,
	111, 611,
	-2, 607,
	-1, 254,
	111, 612,
	-2, 608,
	-1, 324,
	81, 777,
	-2, 59,
	-1, 325,
	81, 735,
	-2, 60,
	-1, 330,
	81, 717,
	-2, 573,
	-1, 332,
	81, 756,
	-2, 575,
	-1, 600,
	53, 42,
	55, 42,
	-2, 44,
	-1, 736,
	111, 614,
	-2, 610,
	-1, 948,
	5, 29,
	-2, 418,
	-1, 973,
	5, 28,
	-2, 548,
	-1, 1199,
	5, 29,
	-2, 549,
	-1, 1244,
	5, 28,
	-2, 551,
	-1, 1308,
	5, 29,
	-2, 552,
}

const yyPrivate = 57344

const yyLast = 11278

var yyAct = [...]int{

	254, 1342, 1332, 1299, 672, 798, 547, 1255, 887, 258,
	1106, 1134, 816, 1037, 1205, 1107, 232, 594, 976, 881,
	592, 546, 3, 847, 1103, 914, 837, 992, 799, 867,
	1080, 80, 838, 224, 55, 197, 284, 834, 197, 761,
	940, 771, 701, 329, 768, 610, 1040, 981, 787, 1028,
	738, 323, 877, 609, 581, 428, 795, 922, 596, 491,
	256, 479, 499, 851, 197, 197, 80, 320, 485, 241,
	197, 231, 197, 318, 80, 561, 54, 225, 226, 227,
	228, 1335, 1319, 1330, 309, 1306, 1327, 311, 888, 1318,
	1305, 904, 1098, 1193, 433, 1265, 1129, 1130, 1142, 1143,
	1144, 310, 454, 245, 1128, 903, 1147, 1145, 611, 59,
	612, 316, 1280, 512, 511, 521, 522, 514, 515, 516,
	517, 518, 519, 520, 513, 830, 831, 523, 192, 188,
	189, 190, 829, 908, 61, 62, 63, 64, 65, 230,
	229, 1000, 902, 470, 999, 1019, 194, 1001, 860, 1218,
	471, 468, 442, 1233, 861, 868, 1182, 1180, 223, 465,
	466, 1329, 1326, 1300, 1081, 1061, 456, 796, 458, 1292,
	852, 1350, 1256, 206, 817, 819, 319, 443, 436, 186,
	459, 430, 680, 432, 854, 1258, 197, 671, 197, 1263,
	991, 899, 896, 897, 197, 895, 854, 218, 455, 457,
	1083, 197, 185, 990, 186, 80, 80, 80, 80, 989,
	80, 431, 854, 429, 439, 200, 1346, 1285, 187, 80,
	535, 536, 1202, 1067, 956, 906, 909, 1058, 934, 710,
	702, 503, 1085, 1060, 1089, 1151, 1084, 449, 1082, 513,
	835, 1012, 523, 1087, 191, 523, 707, 201, 80, 818,
	498, 1257, 1086, 251, 203, 713, 714, 745, 1290, 488,
	901, 209, 205, 475, 476, 1088, 1090, 1100, 429, 1161,
	487, 743, 744, 742, 1146, 979, 1281, 613, 853, 496,
	868, 453, 900, 850, 848, 1152, 849, 788, 1264, 1262,
	853, 846, 852, 207, 1304, 498, 211, 440, 675, 441,
	427, 68, 497, 496, 916, 448, 853, 770, 1017, 197,
	703, 1048, 450, 497, 496, 1294, 197, 197, 197, 498,
	1344, 905, 80, 1345, 202, 1343, 493, 1059, 80, 1057,
	498, 952, 857, 951, 907, 953, 69, 858, 461, 260,
	1046, 1351, 1310, 445, 446, 447, 497, 496, 489, 497,
	496, 212, 204, 1102, 213, 214, 215, 217, 216, 221,
	435, 52, 1224, 498, 220, 219, 498, 184, 788, 1048,
	963, 741, 709, 563, 564, 565, 566, 567, 568, 569,
	1352, 915, 1223, 1032, 497, 496, 462, 463, 464, 607,
	467, 601, 516, 517, 518, 519, 520, 513, 1046, 474,
	523, 498, 1031, 314, 326, 1047, 931, 932, 933, 708,
	1052, 1049, 1042, 1050, 1045, 762, 1020, 763, 1043, 1044,
	576, 1002, 1312, 1003, 1291, 497, 496, 1240, 197, 600,
	308, 1221, 1051, 80, 1064, 1029, 437, 438, 1054, 197,
	197, 80, 498, 197, 285, 49, 197, 21, 1248, 1328,
	197, 1288, 80, 80, 80, 80, 80, 80, 80, 80,
	728, 730, 731, 1047, 1138, 729, 80, 80, 1052, 1049,
	1042, 1050, 1045, 197, 1315, 478, 1043, 1044, 512, 511,
	521, 522, 514, 515, 516, 517, 518, 519, 520, 513,
	1051, 80, 523, 689, 49, 197, 1041, 1248, 1297, 1248,
	1260, 80, 237, 1137, 715, 236, 1013, 687, 315, 1248,
	478, 1248, 1249, 1214, 1213, 537, 538, 539, 540, 541,
	542, 543, 544, 1125, 478, 1201, 478, 1158, 1157, 478,
	941, 514, 515, 516, 517, 518, 519, 520, 513, 621,
	1008, 523, 890, 739, 23, 80, 764, 736, 1154, 1155,
	677, 678, 1154, 1153, 681, 946, 478, 684, 686, 717,
	685, 734, 676, 732, 780, 783, 578, 478, 971, 674,
	789, 775, 972, 773, 478, 1269, 197, 669, 451, 197,
	197, 197, 197, 197, 704, 620, 619, 800, 444, 1268,
	1148, 197, 52, 855, 197, 533, 765, 766, 197, 1104,
	23, 56, 977, 197, 197, 577, 724, 80, 977, 823,
	978, 603, 773, 670, 1197, 775, 792, 785, 978, 578,
	80, 679, 1160, 824, 1156, 1004, 828, 604, 1243, 1070,
	578, 23, 690, 691, 692, 693, 694, 695, 696, 697,
	946, 946, 958, 283, 813, 955, 698, 699, 52, 460,
	460, 460, 460, 578, 460, 314, 821, 822, 826, 606,
	326, 977, 827, 460, 869, 870, 871, 802, 803, 605,
	805, 603, 197, 946, 78, 80, 842, 80, 711, 52,
	801, 197, 49, 804, 197, 80, 957, 797, 883, 954,
	52, 238, 1320, 1228, 862, 882, 1139, 532, 477, 1119,
	534, 197, 1007, 197, 197, 982, 983, 1337, 878, 328,
	873, 872, 673, 885, 1333, 825, 1141, 434, 879, 880,
	583, 586, 587, 588, 584, 1104, 585, 589, 545, 1033,
	549, 550, 551, 552, 553, 554, 555, 556, 557, 52,
	560, 562, 562, 562, 562, 562, 562, 562, 562, 570,
	571, 572, 573, 985, 736, 683, 472, 723, 988, 737,
	593, 987, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 924, 807, 739,
	923, 806, 1324, 886, 863, 864, 865, 866, 919, 810,
	1317, 808, 910, 936, 811, 911, 809, 242, 243, 1066,
	874, 875, 876, 1323, 274, 273, 276, 277, 278, 279,
	929, 928, 913, 275, 280, 1024, 812, 973, 587, 588,
	618, 80, 452, 1016, 197, 521, 522, 514, 515, 516,
	517, 518, 519, 520, 513, 962, 1296, 523, 80, 492,
	1295, 994, 735, 996, 995, 1241, 740, 1014, 328, 328,
	328, 328, 986, 328, 490, 891, 480, 893, 776, 777,
	1009, 1195, 328, 591, 784, 912, 1229, 892, 481, 682,
	1005, 239, 240, 492, 997, 927, 233, 460, 791, 1274,
	793, 794, 234, 926, 56, 460, 80, 80, 1273, 80,
	1231, 501, 978, 1021, 1022, 473, 460, 460, 460, 460,
	460, 460, 460, 460, 700, 1023, 494, 1025, 1026, 1027,
	460, 460, 80, 1010, 1011, 1339, 1338, 1339, 314, 314,
	314, 314, 314, 1030, 1282, 1219, 197, 706, 1039, 58,
	60, 602, 53, 314, 1331, 80, 889, 1036, 898, 1298,
	1254, 1133, 314, 1053, 845, 326, 836, 67, 426, 66,
	1289, 844, 843, 1261, 1217, 856, 1063, 1018, 839, 859,
	1140, 1293, 1015, 626, 624, 328, 625, 623, 628, 627,
	622, 615, 208, 321, 590, 80, 80, 1105, 1074, 49,
	1073, 800, 614, 884, 1092, 495, 70, 800, 1079, 1056,
	1055, 894, 1091, 469, 549, 1099, 1110, 937, 938, 939,
	736, 210, 531, 1113, 925, 80, 1115, 80, 80, 1108,
	998, 1114, 327, 247, 1127, 1111, 712, 484, 1272, 1230,
	961, 558, 786, 315, 315, 315, 315, 315, 259, 1126,
	930, 1131, 1136, 727, 197, 272, 269, 1068, 593, 1132,
	820, 271, 80, 270, 718, 970, 505, 315, 257, 735,
	249, 313, 574, 582, 580, 80, 197, 579, 984, 1149,
	1150, 980, 80, 312, 1069, 1192, 1279, 1035, 80, 722,
	25, 197, 57, 244, 1162, 19, 328, 945, 18, 17,
	20, 16, 740, 15, 328, 14, 29, 1164, 1170, 1169,
	1167, 1171, 1062, 960, 13, 328, 328, 328, 328, 328,
	328, 328, 328, 12, 11, 1178, 10, 9, 8, 328,
	328, 7, 6, 5, 4, 235, 22, 2, 1, 460,
	80, 460, 80, 80, 80, 197, 80, 0, 0, 460,
	1196, 1204, 80, 0, 719, 0, 1207, 1208, 1209, 0,
	80, 0, 1210, 1212, 501, 1159, 0, 328, 0, 0,
	0, 0, 0, 0, 1216, 0, 0, 0, 0, 0,
	80, 80, 80, 314, 1005, 0, 0, 1166, 0, 0,
	0, 0, 0, 0, 1226, 0, 839, 0, 0, 0,
	935, 0, 0, 1220, 0, 1222, 0, 716, 767, 0,
	0, 0, 0, 0, 1227, 1076, 1077, 0, 781, 781,
	0, 0, 80, 80, 781, 0, 1232, 0, 1093, 1094,
	0, 1096, 1097, 1242, 0, 80, 0, 0, 0, 0,
	0, 781, 1244, 1253, 0, 0, 1259, 1038, 0, 80,
	0, 0, 0, 0, 1108, 0, 1175, 1176, 0, 1177,
	974, 975, 1179, 1270, 1181, 772, 774, 482, 486, 80,
	328, 0, 0, 0, 1283, 0, 0, 0, 1266, 0,
	1267, 790, 1287, 328, 504, 0, 0, 1284, 315, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	1108, 1302, 0, 0, 0, 0, 80, 0, 1307, 0,
	1215, 815, 800, 197, 0, 1095, 0, 0, 0, 548,
	0, 80, 1313, 583, 586, 587, 588, 584, 559, 585,
	589, 0, 0, 982, 983, 0, 0, 0, 328, 1322,
	328, 80, 1321, 0, 0, 0, 0, 0, 328, 1173,
	0, 460, 0, 0, 1336, 1325, 0, 0, 0, 0,
	1225, 1347, 0, 839, 0, 839, 1189, 478, 0, 507,
	0, 510, 0, 0, 328, 0, 460, 524, 525, 526,
	527, 528, 529, 530, 0, 508, 509, 506, 512, 511,
	521, 522, 514, 515, 516, 517, 518, 519, 520, 513,
	0, 0, 523, 512, 511, 521, 522, 514, 515, 516,
	517, 518, 519, 520, 513, 0, 0, 523, 0, 0,
	0, 0, 0, 0, 1311, 0, 1072, 0, 0, 0,
	314, 1186, 478, 0, 0, 0, 0, 1109, 0, 49,
	511, 521, 522, 514, 515, 516, 517, 518, 519, 520,
	513, 0, 0, 523, 1121, 1122, 1123, 0, 0, 0,
	1234, 1235, 0, 1236, 1237, 1238, 0, 0, 512, 511,
	521, 522, 514, 515, 516, 517, 518, 519, 520, 513,
	0, 0, 523, 943, 993, 0, 0, 944, 0, 0,
	839, 0, 0, 0, 948, 949, 950, 0, 0, 0,
	0, 328, 0, 959, 0, 0, 0, 705, 965, 0,
	966, 967, 968, 969, 0, 0, 0, 1075, 0, 1038,
	839, 0, 0, 0, 0, 0, 0, 0, 0, 483,
	725, 726, 0, 0, 0, 315, 0, 512, 511, 521,
	522, 514, 515, 516, 517, 518, 519, 520, 513, 1034,
	328, 523, 328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1191, 195, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	0, 0, 0, 548, 0, 0, 778, 779, 0, 0,
	0, 248, 0, 195, 195, 0, 0, 0, 328, 195,
	0, 195, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	328, 0, 0, 0, 460, 23, 24, 50, 26, 27,
	0, 0, 0, 0, 0, 781, 0, 0, 1112, 993,
	478, 781, 0, 0, 42, 0, 0, 833, 0, 28,
	47, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 0, 1078, 1245, 0, 0, 328, 37,
	328, 1135, 0, 52, 0, 0, 512, 511, 521, 522,
	514, 515, 516, 517, 518, 519, 520, 513, 0, 0,
	523, 0, 0, 0, 1271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1163, 0, 0, 1109, 0,
	49, 1124, 0, 0, 0, 195, 0, 195, 1165, 0,
	0, 0, 0, 195, 0, 1168, 0, 0, 0, 0,
	195, 328, 0, 30, 31, 33, 32, 35, 0, 0,
	0, 0, 920, 921, 0, 486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	43, 44, 0, 0, 45, 46, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 1190, 0, 0, 38, 39,
	0, 40, 41, 1206, 0, 1206, 1206, 1206, 0, 1211,
	0, 0, 1172, 0, 1334, 328, 0, 0, 0, 1174,
	0, 0, 0, 1206, 0, 0, 1187, 947, 0, 0,
	1183, 1184, 1185, 0, 0, 1188, 0, 0, 0, 0,
	0, 0, 964, 328, 328, 328, 0, 0, 1198, 1199,
	1200, 0, 1203, 0, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 0, 0, 195, 598, 195, 512, 511,
	521, 522, 514, 515, 516, 517, 518, 519, 520, 513,
	0, 0, 523, 51, 0, 1246, 1247, 0, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 0, 1135, 512,
	511, 521, 522, 514, 515, 516, 517, 518, 519, 520,
	513, 0, 1206, 523, 512, 511, 521, 522, 514, 515,
	516, 517, 518, 519, 520, 513, 0, 0, 523, 0,
	0, 1239, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1250, 1251, 1252, 512,
	511, 521, 522, 514, 515, 516, 517, 518, 519, 520,
	513, 0, 0, 523, 0, 0, 781, 0, 0, 1309,
	1065, 0, 0, 1275, 1276, 1277, 1278, 195, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 195, 195,
	0, 0, 195, 0, 0, 195, 0, 0, 0, 688,
	0, 0, 0, 0, 1206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 1303, 0,
	0, 0, 195, 1308, 0, 0, 0, 0, 0, 0,
	0, 643, 1116, 1117, 0, 0, 1118, 1314, 0, 1120,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 688, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	248, 248, 0, 0, 782, 782, 248, 0, 631, 0,
	782, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 248, 248, 248, 0, 195, 0, 782, 195, 195,
	195, 195, 195, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 195, 644, 0, 0, 598, 0, 0,
	0, 0, 195, 195, 0, 0, 1194, 0, 0, 0,
	0, 0, 0, 548, 0, 657, 658, 659, 660, 661,
	662, 663, 0, 664, 665, 666, 667, 668, 645, 646,
	647, 648, 629, 630, 0, 0, 632, 0, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 649, 650,
	651, 652, 653, 654, 655, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 195, 0, 0, 0, 0, 0, 0, 0, 100,
	195, 0, 0, 195, 0, 114, 0, 116, 0, 0,
	152, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 0, 917, 918, 0, 0, 0, 0, 0, 79,
	688, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 511, 521, 522, 514, 515,
	516, 517, 518, 519, 520, 513, 0, 0, 523, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 198, 0, 1301, 548, 0,
	139, 0, 155, 105, 113, 248, 87, 0, 104, 131,
	144, 148, 0, 0, 0, 96, 0, 146, 135, 167,
	0, 136, 145, 117, 159, 140, 166, 199, 174, 157,
	173, 82, 156, 165, 94, 149, 84, 163, 154, 123,
	109, 110, 83, 195, 143, 99, 103, 98, 132, 160,
	161, 97, 182, 88, 172, 86, 89, 171, 130, 158,
	164, 124, 121, 85, 162, 122, 120, 112, 101, 106,
	137, 119, 138, 107, 127, 126, 128, 0, 0, 0,
	153, 169, 183, 91, 0, 0, 175, 176, 177, 178,
	179, 0, 0, 92, 129, 90, 108, 150, 111, 118,
	142, 181, 134, 147, 95, 168, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 115, 180, 141, 102,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 688, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 782, 0, 0, 0, 0, 0, 782, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	404, 0, 376, 417, 354, 368, 425, 369, 370, 397,
	340, 384, 133, 366, 0, 357, 335, 363, 336, 355,
	378, 100, 381, 353, 406, 387, 416, 114, 423, 116,
	392, 0, 152, 125, 0, 0, 380, 408, 382, 402,
	375, 398, 345, 391, 418, 367, 395, 419, 0, 0,
	0, 79, 0, 840, 841, 0, 0, 0, 0, 0,
	93, 0, 394, 413, 365, 396, 334, 393, 0, 338,
	341, 424, 411, 360, 361, 1006, 0, 0, 0, 0,
	0, 0, 379, 383, 399, 373, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 390, 0, 0, 0,
	342, 339, 782, 0, 377, 0, 0, 0, 344, 0,
	359, 400, 195, 333, 403, 409, 374, 198, 412, 372,
	371, 415, 139, 0, 155, 105, 113, 0, 87, 0,
	104, 131, 144, 148, 407, 356, 364, 96, 362, 146,
	135, 167, 389, 136, 145, 117, 159, 140, 166, 199,
	174, 157, 173, 82, 156, 165, 94, 149, 84, 163,
	154, 123, 109, 110, 83, 0, 143, 99, 103, 98,
	132, 160, 161, 97, 182, 88, 172, 86, 89, 171,
	130, 158, 164, 124, 121, 85, 162, 122, 120, 112,
	101, 106, 137, 119, 138, 107, 127, 126, 128, 0,
	337, 0, 153, 169, 183, 91, 352, 410, 175, 176,
	177, 178, 179, 0, 0, 92, 129, 90, 108, 150,
	111, 118, 142, 181, 134, 147, 95, 168, 151, 348,
	351, 346, 347, 385, 386, 420, 421, 422, 401, 343,
	0, 349, 350, 0, 405, 388, 81, 0, 115, 180,
	141, 102, 170, 414, 404, 0, 376, 417, 354, 368,
	425, 369, 370, 397, 340, 384, 133, 366, 0, 357,
	335, 363, 336, 355, 378, 100, 381, 353, 406, 387,
	416, 114, 423, 116, 392, 0, 152, 125, 0, 0,
	380, 408, 382, 402, 375, 398, 345, 391, 418, 367,
	395, 419, 0, 0, 0, 79, 0, 840, 841, 0,
	0, 0, 0, 0, 93, 0, 394, 413, 365, 396,
	334, 393, 0, 338, 341, 424, 411, 360, 361, 0,
	0, 0, 0, 0, 0, 0, 379, 383, 399, 373,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 0,
	390, 0, 0, 0, 342, 339, 0, 0, 377, 0,
	0, 0, 344, 0, 359, 400, 0, 333, 403, 409,
	374, 198, 412, 372, 371, 415, 139, 0, 155, 105,
	113, 0, 87, 0, 104, 131, 144, 148, 407, 356,
	364, 96, 362, 146, 135, 167, 389, 136, 145, 117,
	159, 140, 166, 199, 174, 157, 173, 82, 156, 165,
	94, 149, 84, 163, 154, 123, 109, 110, 83, 0,
	143, 99, 103, 98, 132, 160, 161, 97, 182, 88,
	172, 86, 89, 171, 130, 158, 164, 124, 121, 85,
	162, 122, 120, 112, 101, 106, 137, 119, 138, 107,
	127, 126, 128, 0, 337, 0, 153, 169, 183, 91,
	352, 410, 175, 176, 177, 178, 179, 0, 0, 92,
	129, 90, 108, 150, 111, 118, 142, 181, 134, 147,
	95, 168, 151, 348, 351, 346, 347, 385, 386, 420,
	421, 422, 401, 343, 0, 349, 350, 0, 405, 388,
	81, 0, 115, 180, 141, 102, 170, 414, 404, 0,
	376, 417, 354, 368, 425, 369, 370, 397, 340, 384,
	133, 366, 0, 357, 335, 363, 336, 355, 378, 100,
	381, 353, 406, 387, 416, 114, 423, 116, 392, 0,
	152, 125, 0, 0, 380, 408, 382, 402, 375, 398,
	345, 391, 418, 367, 395, 419, 52, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	394, 413, 365, 396, 334, 393, 0, 338, 341, 424,
	411, 360, 361, 0, 0, 0, 0, 0, 0, 0,
	379, 383, 399, 373, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 390, 0, 0, 0, 342, 339,
	0, 0, 377, 0, 0, 0, 344, 0, 359, 400,
	0, 333, 403, 409, 374, 198, 412, 372, 371, 415,
	139, 0, 155, 105, 113, 0, 87, 0, 104, 131,
	144, 148, 407, 356, 364, 96, 362, 146, 135, 167,
	389, 136, 145, 117, 159, 140, 166, 199, 174, 157,
	173, 82, 156, 165, 94, 149, 84, 163, 154, 123,
	109, 110, 83, 0, 143, 99, 103, 98, 132, 160,
	161, 97, 182, 88, 172, 86, 89, 171, 130, 158,
	164, 124, 121, 85, 162, 122, 120, 112, 101, 106,
	137, 119, 138, 107, 127, 126, 128, 0, 337, 0,
	153, 169, 183, 91, 352, 410, 175, 176, 177, 178,
	179, 0, 0, 92, 129, 90, 108, 150, 111, 118,
	142, 181, 134, 147, 95, 168, 151, 348, 351, 346,
	347, 385, 386, 420, 421, 422, 401, 343, 0, 349,
	350, 0, 405, 388, 81, 0, 115, 180, 141, 102,
	170, 414, 404, 0, 376, 417, 354, 368, 425, 369,
	370, 397, 340, 384, 133, 366, 0, 357, 335, 363,
	336, 355, 378, 100, 381, 353, 406, 387, 416, 114,
	423, 116, 392, 0, 152, 125, 0, 0, 380, 408,
	382, 402, 375, 398, 345, 391, 418, 367, 395, 419,
	0, 0, 0, 79, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 394, 413, 365, 396, 334, 393,
	0, 338, 341, 424, 411, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 379, 383, 399, 373, 0, 0,
	0, 0, 0, 0, 1071, 0, 358, 0, 390, 0,
	0, 0, 342, 339, 0, 0, 377, 0, 0, 0,
	344, 0, 359, 400, 0, 333, 403, 409, 374, 198,
	412, 372, 371, 415, 139, 0, 155, 105, 113, 0,
	87, 0, 104, 131, 144, 148, 407, 356, 364, 96,
	362, 146, 135, 167, 389, 136, 145, 117, 159, 140,
	166, 199, 174, 157, 173, 82, 156, 165, 94, 149,
	84, 163, 154, 123, 109, 110, 83, 0, 143, 99,
	103, 98, 132, 160, 161, 97, 182, 88, 172, 86,
	89, 171, 130, 158, 164, 124, 121, 85, 162, 122,
	120, 112, 101, 106, 137, 119, 138, 107, 127, 126,
	128, 0, 337, 0, 153, 169, 183, 91, 352, 410,
	175, 176, 177, 178, 179, 0, 0, 92, 129, 90,
	108, 150, 111, 118, 142, 181, 134, 147, 95, 168,
	151, 348, 351, 346, 347, 385, 386, 420, 421, 422,
	401, 343, 0, 349, 350, 0, 405, 388, 81, 0,
	115, 180, 141, 102, 170, 414, 404, 0, 376, 417,
	354, 368, 425, 369, 370, 397, 340, 384, 133, 366,
	0, 357, 335, 363, 336, 355, 378, 100, 381, 353,
	406, 387, 416, 114, 423, 116, 392, 0, 152, 125,
	0, 0, 380, 408, 382, 402, 375, 398, 345, 391,
	418, 367, 395, 419, 0, 0, 0, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 394, 413,
	365, 396, 334, 393, 0, 338, 341, 424, 411, 360,
	361, 0, 0, 0, 0, 0, 0, 0, 379, 383,
	399, 373, 0, 0, 0, 0, 0, 0, 733, 0,
	358, 0, 390, 0, 0, 0, 342, 339, 0, 0,
	377, 0, 0, 0, 344, 0, 359, 400, 0, 333,
	403, 409, 374, 198, 412, 372, 371, 415, 139, 0,
	155, 105, 113, 0, 87, 0, 104, 131, 144, 148,
	407, 356, 364, 96, 362, 146, 135, 167, 389, 136,
	145, 117, 159, 140, 166, 199, 174, 157, 173, 82,
	156, 165, 94, 149, 84, 163, 154, 123, 109, 110,
	83, 0, 143, 99, 103, 98, 132, 160, 161, 97,
	182, 88, 172, 86, 89, 171, 130, 158, 164, 124,
	121, 85, 162, 122, 120, 112, 101, 106, 137, 119,
	138, 107, 127, 126, 128, 0, 337, 0, 153, 169,
	183, 91, 352, 410, 175, 176, 177, 178, 179, 0,
	0, 92, 129, 90, 108, 150, 111, 118, 142, 181,
	134, 147, 95, 168, 151, 348, 351, 346, 347, 385,
	386, 420, 421, 422, 401, 343, 0, 349, 350, 0,
	405, 388, 81, 0, 115, 180, 141, 102, 170, 414,
	404, 0, 376, 417, 354, 368, 425, 369, 370, 397,
	340, 384, 133, 366, 0, 357, 335, 363, 336, 355,
	378, 100, 381, 353, 406, 387, 416, 114, 423, 116,
	392, 0, 152, 125, 0, 0, 380, 408, 382, 402,
	375, 398, 345, 391, 418, 367, 395, 419, 0, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 394, 413, 365, 396, 334, 393, 0, 338,
	341, 424, 411, 360, 361, 0, 0, 0, 0, 0,
	0, 0, 379, 383, 399, 373, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 390, 0, 0, 0,
	342, 339, 0, 0, 377, 0, 0, 0, 344, 0,
	359, 400, 0, 333, 403, 409, 374, 198, 412, 372,
	371, 415, 139, 0, 155, 105, 113, 0, 87, 0,
	104, 131, 144, 148, 407, 356, 364, 96, 362, 146,
	135, 167, 389, 136, 145, 117, 159, 140, 166, 199,
	174, 157, 173, 82, 156, 165, 94, 149, 84, 163,
	154, 123, 109, 110, 83, 0, 143, 99, 103, 98,
	132, 160, 161, 97, 182, 88, 172, 86, 89, 171,
	130, 158, 164, 124, 121, 85, 162, 122, 120, 112,
	101, 106, 137, 119, 138, 107, 127, 126, 128, 0,
	337, 0, 153, 169, 183, 91, 352, 410, 175, 176,
	177, 178, 179, 0, 0, 92, 129, 90, 108, 150,
	111, 118, 142, 181, 134, 147, 95, 168, 151, 348,
	351, 346, 347, 385, 386, 420, 421, 422, 401, 343,
	0, 349, 350, 0, 405, 388, 81, 0, 115, 180,
	141, 102, 170, 414, 404, 0, 376, 417, 354, 368,
	425, 369, 370, 397, 340, 384, 133, 366, 0, 357,
	335, 363, 336, 355, 378, 100, 381, 353, 406, 387,
	416, 114, 423, 116, 392, 0, 152, 125, 0, 0,
	380, 408, 382, 402, 375, 398, 345, 391, 418, 367,
	395, 419, 0, 0, 0, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 394, 413, 365, 396,
	334, 393, 0, 338, 341, 424, 411, 360, 361, 0,
	0, 0, 0, 0, 0, 0, 379, 383, 399, 373,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 0,
	390, 0, 0, 0, 342, 339, 0, 0, 377, 0,
	0, 0, 344, 0, 359, 400, 0, 333, 403, 409,
	374, 198, 412, 372, 371, 415, 139, 0, 155, 105,
	113, 0, 87, 0, 104, 131, 144, 148, 407, 356,
	364, 96, 362, 146, 135, 167, 389, 136, 145, 117,
	159, 140, 166, 199, 174, 157, 173, 82, 156, 165,
	94, 149, 84, 163, 154, 123, 109, 110, 83, 0,
	143, 99, 103, 98, 132, 160, 161, 97, 182, 88,
	172, 86, 89, 171, 130, 158, 164, 124, 121, 85,
	162, 122, 120, 112, 101, 106, 137, 119, 138, 107,
	127, 126, 128, 0, 337, 0, 153, 169, 183, 91,
	352, 410, 175, 176, 177, 178, 179, 0, 0, 92,
	129, 90, 108, 150, 111, 118, 142, 181, 134, 147,
	95, 168, 151, 348, 351, 346, 347, 385, 386, 420,
	421, 422, 401, 343, 0, 349, 350, 0, 405, 388,
	81, 0, 115, 180, 141, 102, 170, 414, 404, 0,
	376, 417, 354, 368, 425, 369, 370, 397, 340, 384,
	133, 366, 0, 357, 335, 363, 336, 355, 378, 100,
	381, 353, 406, 387, 416, 114, 423, 116, 392, 0,
	152, 125, 0, 0, 380, 408, 382, 402, 375, 398,
	345, 391, 418, 367, 395, 419, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	394, 413, 365, 396, 334, 393, 0, 338, 341, 424,
	411, 360, 361, 0, 0, 0, 0, 0, 0, 0,
	379, 383, 399, 373, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 390, 0, 0, 0, 342, 339,
	0, 0, 377, 0, 0, 0, 344, 0, 359, 400,
	0, 333, 403, 409, 374, 198, 412, 372, 371, 415,
	139, 0, 155, 105, 113, 0, 87, 0, 104, 131,
	144, 148, 407, 356, 364, 96, 362, 146, 135, 167,
	389, 136, 145, 117, 159, 140, 166, 199, 174, 157,
	173, 82, 156, 165, 94, 149, 84, 163, 154, 123,
	109, 110, 83, 0, 143, 99, 103, 98, 132, 160,
	161, 97, 182, 88, 172, 86, 331, 171, 130, 158,
	164, 124, 121, 85, 162, 122, 120, 112, 101, 106,
	137, 119, 138, 107, 127, 126, 128, 0, 337, 0,
	153, 169, 183, 91, 352, 410, 175, 176, 177, 178,
	179, 0, 0, 92, 332, 330, 108, 150, 111, 118,
	142, 181, 134, 147, 95, 168, 151, 348, 351, 346,
	347, 385, 386, 420, 421, 422, 401, 343, 0, 349,
	350, 0, 405, 388, 81, 0, 115, 180, 141, 102,
	170, 414, 404, 0, 376, 417, 354, 368, 425, 369,
	370, 397, 340, 384, 133, 366, 0, 357, 335, 363,
	336, 355, 378, 100, 381, 353, 406, 387, 416, 114,
	423, 116, 392, 0, 152, 125, 0, 0, 380, 408,
	382, 402, 375, 398, 345, 391, 418, 367, 395, 419,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 394, 413, 365, 396, 334, 393,
	0, 338, 341, 424, 411, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 379, 383, 399, 373, 0, 0,
	0, 0, 0, 0, 0, 0, 358, 0, 390, 0,
	0, 0, 342, 339, 0, 0, 377, 0, 0, 0,
	344, 0, 359, 400, 0, 333, 403, 409, 374, 198,
	412, 372, 371, 415, 139, 0, 155, 105, 113, 0,
	87, 0, 104, 131, 144, 148, 407, 356, 364, 96,
	362, 146, 135, 167, 389, 136, 145, 117, 159, 140,
	166, 199, 174, 157, 173, 82, 156, 165, 94, 149,
	84, 163, 154, 123, 109, 110, 83, 0, 143, 99,
	103, 98, 132, 160, 161, 97, 182, 88, 172, 86,
	89, 171, 130, 158, 164, 124, 121, 85, 162, 122,
	120, 112, 101, 106, 137, 119, 138, 107, 127, 126,
	128, 0, 337, 0, 153, 169, 183, 91, 352, 410,
	175, 176, 177, 178, 179, 0, 0, 92, 129, 90,
	108, 150, 111, 118, 142, 181, 134, 147, 95, 168,
	151, 348, 351, 346, 347, 385, 386, 420, 421, 422,
	401, 343, 0, 349, 350, 0, 405, 388, 81, 0,
	115, 180, 141, 102, 170, 414, 404, 0, 376, 417,
	354, 368, 425, 369, 370, 397, 340, 384, 133, 366,
	0, 357, 335, 363, 336, 355, 378, 100, 381, 353,
	406, 387, 416, 114, 423, 116, 392, 0, 152, 125,
	0, 0, 380, 408, 382, 402, 375, 398, 345, 391,
	418, 367, 395, 419, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 394, 413,
	365, 396, 334, 393, 0, 338, 341, 424, 411, 360,
	361, 0, 0, 0, 0, 0, 0, 0, 379, 383,
	399, 373, 0, 0, 0, 0, 0, 0, 0, 0,
	358, 0, 390, 0, 0, 0, 342, 339, 0, 0,
	377, 0, 0, 0, 344, 0, 359, 400, 0, 333,
	403, 409, 374, 198, 412, 372, 371, 415, 139, 0,
	155, 105, 113, 0, 87, 0, 104, 131, 144, 148,
	407, 356, 364, 96, 362, 146, 135, 167, 389, 136,
	145, 117, 159, 140, 166, 199, 174, 157, 173, 82,
	156, 608, 94, 149, 84, 163, 154, 123, 109, 110,
	83, 0, 143, 99, 103, 98, 132, 160, 161, 97,
	182, 88, 172, 86, 331, 171, 130, 158, 164, 124,
	121, 85, 162, 122, 120, 112, 101, 106, 137, 119,
	138, 107, 127, 126, 128, 0, 337, 0, 153, 169,
	183, 91, 352, 410, 175, 176, 177, 178, 179, 0,
	0, 92, 332, 330, 108, 150, 111, 118, 142, 181,
	134, 147, 95, 168, 151, 348, 351, 346, 347, 385,
	386, 420, 421, 422, 401, 343, 0, 349, 350, 0,
	405, 388, 81, 0, 115, 180, 141, 102, 170, 414,
	404, 0, 376, 417, 354, 368, 425, 369, 370, 397,
	340, 384, 133, 366, 0, 357, 335, 363, 336, 355,
	378, 100, 381, 353, 406, 387, 416, 114, 423, 116,
	392, 0, 152, 125, 0, 0, 380, 408, 382, 402,
	375, 398, 345, 391, 418, 367, 395, 419, 0, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 394, 413, 365, 396, 334, 393, 0, 338,
	341, 424, 411, 360, 361, 0, 0, 0, 0, 0,
	0, 0, 379, 383, 399, 373, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 390, 0, 0, 0,
	342, 339, 0, 0, 377, 0, 0, 0, 344, 0,
	359, 400, 0, 333, 403, 409, 374, 198, 412, 372,
	371, 415, 139, 0, 155, 105, 113, 0, 87, 0,
	104, 131, 144, 148, 407, 356, 364, 96, 362, 146,
	135, 167, 389, 136, 145, 117, 159, 140, 166, 199,
	174, 157, 173, 82, 156, 322, 94, 149, 84, 163,
	154, 123, 109, 110, 83, 0, 143, 99, 103, 98,
	132, 160, 161, 97, 182, 88, 172, 86, 331, 171,
	130, 158, 164, 124, 121, 85, 162, 122, 120, 112,
	101, 106, 137, 119, 138, 107, 127, 126, 128, 0,
	337, 0, 153, 169, 183, 91, 352, 410, 175, 176,
	177, 178, 179, 0, 0, 92, 332, 330, 325, 324,
	111, 118, 142, 181, 134, 147, 95, 168, 151, 348,
	351, 346, 347, 385, 386, 420, 421, 422, 401, 343,
	0, 349, 350, 0, 405, 388, 81, 0, 115, 180,
	141, 102, 170, 133, 0, 0, 769, 0, 255, 0,
	0, 0, 100, 0, 252, 0, 0, 0, 114, 295,
	116, 0, 0, 152, 125, 0, 0, 0, 0, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 253, 274, 273, 276, 277, 278, 279, 0,
	0, 93, 275, 280, 281, 282, 0, 0, 250, 267,
	0, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 246, 0, 0, 0, 306, 0, 266,
	0, 0, 261, 262, 263, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 304, 0, 139, 0, 155, 105, 113, 0, 87,
	0, 104, 131, 144, 148, 0, 0, 0, 96, 0,
	146, 135, 167, 0, 136, 145, 117, 159, 140, 166,
	199, 174, 157, 173, 82, 156, 165, 94, 149, 84,
	163, 154, 123, 109, 110, 83, 0, 143, 99, 103,
	98, 132, 160, 161, 97, 182, 88, 172, 86, 89,
	171, 130, 158, 164, 124, 121, 85, 162, 122, 120,
	112, 101, 106, 137, 119, 138, 107, 127, 126, 128,
	0, 0, 0, 153, 169, 183, 91, 0, 0, 175,
	176, 177, 178, 179, 0, 0, 92, 129, 90, 108,
	150, 111, 118, 142, 181, 134, 147, 95, 168, 151,
	296, 305, 302, 303, 300, 301, 299, 298, 297, 307,
	288, 289, 290, 291, 293, 0, 292, 81, 0, 115,
	180, 141, 102, 170, 133, 0, 0, 0, 0, 255,
	0, 0, 0, 100, 0, 252, 0, 0, 0, 114,
	295, 116, 0, 0, 152, 125, 0, 0, 0, 0,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 478, 253, 274, 273, 276, 277, 278, 279,
	0, 0, 93, 275, 280, 281, 282, 0, 0, 250,
	267, 0, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 0, 0, 0, 0, 306, 0,
	266, 0, 0, 261, 262, 263, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 304, 0, 139, 0, 155, 105, 113, 0,
	87, 0, 104, 131, 144, 148, 0, 0, 0, 96,
	0, 146, 135, 167, 0, 136, 145, 117, 159, 140,
	166, 199, 174, 157, 173, 82, 156, 165, 94, 149,
	84, 163, 154, 123, 109, 110, 83, 0, 143, 99,
	103, 98, 132, 160, 161, 97, 182, 88, 172, 86,
	89, 171, 130, 158, 164, 124, 121, 85, 162, 122,
	120, 112, 101, 106, 137, 119, 138, 107, 127, 126,
	128, 0, 0, 0, 153, 169, 183, 91, 0, 0,
	175, 176, 177, 178, 179, 0, 0, 92, 129, 90,
	108, 150, 111, 118, 142, 181, 134, 147, 95, 168,
	151, 296, 305, 302, 303, 300, 301, 299, 298, 297,
	307, 288, 289, 290, 291, 293, 0, 292, 81, 0,
	115, 180, 141, 102, 170, 133, 0, 0, 0, 0,
	255, 0, 0, 0, 100, 0, 252, 0, 0, 0,
	114, 295, 116, 0, 0, 152, 125, 0, 0, 0,
	0, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 253, 274, 273, 276, 277, 278,
	279, 0, 0, 93, 275, 280, 281, 282, 0, 0,
	250, 267, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 246, 0, 0, 0, 306,
	0, 266, 0, 0, 261, 262, 263, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 304, 0, 139, 0, 155, 105, 113,
	0, 87, 0, 104, 131, 144, 148, 0, 0, 0,
	96, 0, 146, 135, 167, 0, 136, 145, 117, 159,
	140, 166, 199, 174, 157, 173, 82, 156, 165, 94,
	149, 84, 163, 154, 123, 109, 110, 83, 0, 143,
	99, 103, 98, 132, 160, 161, 97, 182, 88, 172,
	86, 89, 171, 130, 158, 164, 124, 121, 85, 162,
	122, 120, 112, 101, 106, 137, 119, 138, 107, 127,
	126, 128, 0, 0, 0, 153, 169, 183, 91, 0,
	0, 175, 176, 177, 178, 179, 0, 0, 92, 129,
	90, 108, 150, 111, 118, 142, 181, 134, 147, 95,
	168, 151, 296, 305, 302, 303, 300, 301, 299, 298,
	297, 307, 288, 289, 290, 291, 293, 0, 292, 81,
	0, 115, 180, 141, 102, 170, 133, 0, 0, 0,
	0, 255, 0, 0, 0, 100, 0, 252, 0, 0,
	0, 114, 295, 116, 0, 0, 152, 125, 0, 0,
	0, 0, 286, 287, 0, 0, 0, 0, 0, 0,
	832, 0, 52, 0, 0, 253, 274, 273, 276, 277,
	278, 279, 0, 0, 93, 275, 280, 281, 282, 0,
	0, 250, 267, 0, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 0, 0, 0, 0,
	306, 0, 266, 0, 0, 261, 262, 263, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 304, 0, 139, 0, 155, 105,
	113, 0, 87, 0, 104, 131, 144, 148, 0, 0,
	0, 96, 0, 146, 135, 167, 0, 136, 145, 117,
	159, 140, 166, 199, 174, 157, 173, 82, 156, 165,
	94, 149, 84, 163, 154, 123, 109, 110, 83, 0,
	143, 99, 103, 98, 132, 160, 161, 97, 182, 88,
	172, 86, 89, 171, 130, 158, 164, 124, 121, 85,
	162, 122, 120, 112, 101, 106, 137, 119, 138, 107,
	127, 126, 128, 0, 0, 0, 153, 169, 183, 91,
	0, 0, 175, 176, 177, 178, 179, 0, 0, 92,
	129, 90, 108, 150, 111, 118, 142, 181, 134, 147,
	95, 168, 151, 296, 305, 302, 303, 300, 301, 299,
	298, 297, 307, 288, 289, 290, 291, 293, 23, 292,
	81, 0, 115, 180, 141, 102, 170, 0, 0, 0,
	133, 0, 0, 0, 0, 255, 0, 0, 0, 100,
	0, 252, 0, 0, 0, 114, 295, 116, 0, 0,
	152, 125, 0, 0, 0, 0, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 253,
	274, 273, 276, 277, 278, 279, 0, 0, 93, 275,
	280, 281, 282, 0, 0, 250, 267, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	0, 0, 0, 0, 306, 0, 266, 0, 0, 261,
	262, 263, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 304, 0,
	139, 0, 155, 105, 113, 0, 87, 0, 104, 131,
	144, 148, 0, 0, 0, 96, 0, 146, 135, 167,
	0, 136, 145, 117, 159, 140, 166, 199, 174, 157,
	173, 82, 156, 165, 94, 149, 84, 163, 154, 123,
	109, 110, 83, 0, 143, 99, 103, 98, 132, 160,
	161, 97, 182, 88, 172, 86, 89, 171, 130, 158,
	164, 124, 121, 85, 162, 122, 120, 112, 101, 106,
	137, 119, 138, 107, 127, 126, 128, 0, 0, 0,
	153, 169, 183, 91, 0, 0, 175, 176, 177, 178,
	179, 0, 0, 92, 129, 90, 108, 150, 111, 118,
	142, 181, 134, 147, 95, 168, 151, 296, 305, 302,
	303, 300, 301, 299, 298, 297, 307, 288, 289, 290,
	291, 293, 0, 292, 81, 0, 115, 180, 141, 102,
	170, 133, 0, 0, 0, 0, 255, 0, 0, 0,
	100, 0, 252, 0, 0, 0, 114, 295, 116, 0,
	0, 152, 125, 0, 0, 0, 0, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	253, 274, 273, 276, 277, 278, 279, 0, 0, 93,
	275, 280, 281, 282, 0, 0, 250, 267, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 0, 0, 0, 0, 306, 0, 266, 0, 0,
	261, 262, 263, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 304,
	0, 139, 0, 155, 105, 113, 0, 87, 0, 104,
	131, 144, 148, 0, 0, 0, 96, 0, 146, 135,
	167, 0, 136, 145, 117, 159, 140, 166, 199, 174,
	157, 173, 82, 156, 165, 94, 149, 84, 163, 154,
	123, 109, 110, 83, 0, 143, 99, 103, 98, 132,
	160, 161, 97, 182, 88, 172, 86, 89, 171, 130,
	158, 164, 124, 121, 85, 162, 122, 120, 112, 101,
	106, 137, 119, 138, 107, 127, 126, 128, 0, 0,
	0, 153, 169, 183, 91, 0, 0, 175, 176, 177,
	178, 179, 0, 0, 92, 129, 90, 108, 150, 111,
	118, 142, 181, 134, 147, 95, 168, 151, 296, 305,
	302, 303, 300, 301, 299, 298, 297, 307, 288, 289,
	290, 291, 293, 133, 292, 81, 0, 115, 180, 141,
	102, 170, 100, 0, 0, 0, 0, 0, 114, 295,
	116, 0, 0, 152, 125, 0, 0, 0, 0, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 253, 274, 273, 276, 277, 278, 279, 0,
	0, 93, 275, 280, 281, 282, 0, 0, 0, 267,
	0, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 0, 0, 0, 0, 306, 0, 266,
	0, 0, 261, 262, 263, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 304, 0, 139, 0, 155, 105, 113, 0, 87,
	0, 104, 131, 144, 148, 0, 0, 0, 96, 0,
	146, 135, 167, 1341, 136, 145, 117, 159, 140, 166,
	199, 174, 157, 173, 82, 156, 165, 94, 149, 84,
	163, 154, 123, 109, 110, 83, 0, 143, 99, 103,
	98, 132, 160, 161, 97, 182, 88, 172, 86, 89,
	171, 130, 158, 164, 124, 121, 85, 162, 122, 120,
	112, 101, 106, 137, 119, 138, 107, 127, 126, 128,
	0, 0, 0, 153, 169, 183, 91, 0, 0, 175,
	176, 177, 178, 179, 0, 0, 92, 129, 90, 108,
	150, 111, 118, 142, 181, 134, 147, 95, 168, 151,
	296, 305, 302, 303, 300, 301, 299, 298, 297, 307,
	288, 289, 290, 291, 293, 133, 292, 81, 0, 115,
	180, 141, 102, 170, 100, 0, 0, 0, 0, 0,
	114, 295, 116, 0, 0, 152, 125, 0, 0, 0,
	0, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 253, 274, 273, 276, 277, 278,
	279, 0, 0, 93, 275, 280, 281, 282, 0, 0,
	0, 267, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 0, 0, 0, 0, 306,
	0, 266, 0, 0, 261, 262, 263, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 304, 0, 139, 0, 155, 105, 113,
	0, 87, 0, 104, 131, 144, 148, 0, 0, 0,
	96, 0, 146, 135, 167, 0, 136, 145, 117, 159,
	140, 166, 199, 174, 157, 173, 82, 156, 165, 94,
	149, 84, 163, 154, 123, 109, 110, 83, 0, 143,
	99, 103, 98, 132, 160, 161, 97, 182, 88, 172,
	86, 89, 171, 130, 158, 164, 124, 121, 85, 162,
	122, 120, 112, 101, 106, 137, 119, 138, 107, 127,
	126, 128, 0, 0, 0, 153, 169, 183, 91, 0,
	0, 175, 176, 177, 178, 179, 0, 0, 92, 129,
	90, 108, 150, 111, 118, 142, 181, 134, 147, 95,
	168, 151, 296, 305, 302, 303, 300, 301, 299, 298,
	297, 307, 288, 289, 290, 291, 293, 0, 292, 81,
	0, 115, 180, 141, 102, 170, 133, 0, 0, 0,
	500, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 114, 0, 116, 0, 0, 152, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 502, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 497,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 139, 0, 155, 105,
	113, 0, 87, 0, 104, 131, 144, 148, 0, 0,
	0, 96, 0, 146, 135, 167, 0, 136, 145, 117,
	159, 140, 166, 199, 174, 157, 173, 82, 156, 165,
	94, 149, 84, 163, 154, 123, 109, 110, 83, 0,
	143, 99, 103, 98, 132, 160, 161, 97, 182, 88,
	172, 86, 89, 171, 130, 158, 164, 124, 121, 85,
	162, 122, 120, 112, 101, 106, 137, 119, 138, 107,
	127, 126, 128, 0, 0, 0, 153, 169, 183, 91,
	0, 0, 175, 176, 177, 178, 179, 0, 0, 92,
	129, 90, 108, 150, 111, 118, 142, 181, 134, 147,
	95, 168, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	81, 100, 115, 180, 141, 102, 170, 114, 0, 116,
	0, 0, 152, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 76, 0, 71, 0, 0,
	0, 77, 139, 0, 155, 105, 113, 0, 87, 0,
	104, 131, 144, 148, 0, 0, 0, 96, 0, 146,
	135, 167, 0, 136, 145, 117, 159, 140, 166, 73,
	174, 157, 173, 82, 156, 165, 94, 149, 84, 163,
	154, 123, 109, 110, 83, 0, 143, 99, 103, 98,
	132, 160, 161, 97, 182, 88, 172, 86, 89, 171,
	130, 158, 164, 124, 121, 85, 162, 122, 120, 112,
	101, 106, 137, 119, 138, 107, 127, 126, 128, 0,
	0, 0, 153, 169, 183, 91, 0, 0, 175, 176,
	177, 178, 179, 0, 0, 92, 129, 90, 108, 150,
	111, 118, 142, 181, 134, 147, 95, 168, 151, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 597, 0, 0, 0, 81, 100, 115, 180,
	141, 102, 170, 114, 0, 116, 0, 0, 152, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 599,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 139, 0,
	155, 105, 113, 0, 87, 0, 104, 131, 144, 148,
	0, 0, 0, 96, 0, 146, 135, 167, 0, 136,
	145, 117, 159, 140, 166, 199, 174, 157, 173, 82,
	156, 165, 94, 149, 84, 163, 154, 123, 109, 110,
	83, 0, 143, 99, 103, 98, 132, 160, 161, 97,
	182, 88, 172, 86, 89, 171, 130, 158, 164, 124,
	121, 85, 162, 122, 120, 112, 101, 106, 137, 119,
	138, 107, 127, 126, 128, 0, 0, 0, 153, 169,
	183, 91, 0, 0, 175, 176, 177, 178, 179, 0,
	0, 92, 129, 90, 108, 150, 111, 118, 142, 181,
	134, 147, 95, 168, 151, 0, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 81, 0, 115, 180, 141, 102, 170, 100,
	0, 0, 0, 0, 0, 114, 0, 116, 0, 0,
	152, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	139, 0, 155, 105, 113, 0, 87, 0, 104, 131,
	144, 148, 0, 0, 0, 96, 0, 146, 135, 167,
	0, 136, 145, 117, 159, 140, 166, 199, 174, 157,
	173, 82, 156, 165, 94, 149, 84, 163, 154, 123,
	109, 110, 83, 0, 143, 99, 103, 98, 132, 160,
	161, 97, 182, 88, 172, 86, 89, 171, 130, 158,
	164, 124, 121, 85, 162, 122, 120, 112, 101, 106,
	137, 119, 138, 107, 127, 126, 128, 0, 0, 0,
	153, 169, 183, 91, 0, 0, 175, 176, 177, 178,
	179, 0, 0, 92, 129, 90, 108, 150, 111, 118,
	142, 181, 134, 147, 95, 168, 151, 0, 0, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 81, 0, 115, 180, 141, 102,
	170, 100, 0, 0, 0, 0, 0, 114, 0, 116,
	0, 0, 152, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 139, 0, 155, 105, 113, 0, 87, 0,
	104, 131, 144, 148, 0, 0, 0, 96, 0, 146,
	135, 167, 0, 136, 145, 117, 159, 140, 166, 199,
	174, 157, 173, 82, 156, 165, 94, 149, 84, 163,
	154, 123, 109, 110, 83, 0, 143, 99, 103, 98,
	132, 160, 161, 97, 182, 88, 172, 86, 89, 171,
	130, 158, 164, 124, 121, 85, 162, 122, 120, 112,
	101, 106, 137, 119, 138, 107, 127, 126, 128, 0,
	0, 0, 153, 169, 183, 91, 0, 0, 175, 176,
	177, 178, 179, 0, 0, 92, 129, 90, 108, 150,
	111, 118, 142, 181, 134, 147, 95, 168, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 81, 100, 115, 180,
	141, 102, 170, 114, 0, 116, 0, 0, 152, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	720, 0, 0, 721, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 139, 0,
	155, 105, 113, 0, 87, 0, 104, 131, 144, 148,
	0, 0, 0, 96, 0, 146, 135, 167, 0, 136,
	145, 117, 159, 140, 166, 199, 174, 157, 173, 82,
	156, 165, 94, 149, 84, 163, 154, 123, 109, 110,
	83, 0, 143, 99, 103, 98, 132, 160, 161, 97,
	182, 88, 172, 86, 89, 171, 130, 158, 164, 124,
	121, 85, 162, 122, 120, 112, 101, 106, 137, 119,
	138, 107, 127, 126, 128, 0, 0, 0, 153, 169,
	183, 91, 0, 0, 175, 176, 177, 178, 179, 0,
	0, 92, 129, 90, 108, 150, 111, 118, 142, 181,
	134, 147, 95, 168, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 81, 0, 115, 180, 141, 102, 170, 100,
	0, 617, 0, 0, 0, 114, 0, 116, 0, 0,
	152, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 616, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	139, 0, 155, 105, 113, 0, 87, 0, 104, 131,
	144, 148, 0, 0, 0, 96, 0, 146, 135, 167,
	0, 136, 145, 117, 159, 140, 166, 199, 174, 157,
	173, 82, 156, 165, 94, 149, 84, 163, 154, 123,
	109, 110, 83, 0, 143, 99, 103, 98, 132, 160,
	161, 97, 182, 88, 172, 86, 89, 171, 130, 158,
	164, 124, 121, 85, 162, 122, 120, 112, 101, 106,
	137, 119, 138, 107, 127, 126, 128, 0, 0, 0,
	153, 169, 183, 91, 0, 0, 175, 176, 177, 178,
	179, 0, 0, 92, 129, 90, 108, 150, 111, 118,
	142, 181, 134, 147, 95, 168, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	597, 0, 0, 0, 81, 100, 115, 180, 141, 102,
	170, 114, 0, 116, 0, 0, 152, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 599, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 139, 0, 155, 105,
	113, 0, 87, 0, 104, 131, 144, 148, 0, 0,
	0, 96, 0, 146, 135, 167, 0, 595, 145, 117,
	159, 140, 166, 199, 174, 157, 173, 82, 156, 165,
	94, 149, 84, 163, 154, 123, 109, 110, 83, 0,
	143, 99, 103, 98, 132, 160, 161, 97, 182, 88,
	172, 86, 89, 171, 130, 158, 164, 124, 121, 85,
	162, 122, 120, 112, 101, 106, 137, 119, 138, 107,
	127, 126, 128, 0, 0, 0, 153, 169, 183, 91,
	0, 0, 175, 176, 177, 178, 179, 0, 0, 92,
	129, 90, 108, 150, 111, 118, 142, 181, 134, 147,
	95, 168, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	81, 100, 115, 180, 141, 102, 170, 114, 0, 116,
	0, 0, 152, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 139, 0, 155, 105, 113, 0, 87, 0,
	104, 131, 144, 148, 0, 0, 0, 96, 0, 146,
	135, 167, 0, 136, 145, 117, 159, 140, 166, 199,
	174, 157, 173, 82, 156, 165, 94, 149, 84, 163,
	154, 123, 109, 110, 83, 0, 143, 99, 103, 98,
	132, 160, 161, 97, 182, 88, 172, 86, 89, 171,
	130, 158, 164, 124, 121, 85, 162, 122, 120, 112,
	101, 106, 137, 119, 138, 107, 127, 126, 128, 0,
	0, 0, 153, 169, 183, 91, 0, 0, 175, 176,
	177, 178, 179, 0, 0, 92, 129, 90, 108, 150,
	111, 118, 142, 181, 134, 147, 95, 168, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 81, 100, 115, 180,
	141, 102, 170, 114, 0, 116, 0, 0, 152, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 599,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 139, 0,
	155, 105, 113, 0, 87, 0, 104, 131, 144, 148,
	0, 0, 0, 96, 0, 146, 135, 167, 0, 136,
	145, 117, 159, 140, 166, 199, 174, 157, 173, 82,
	156, 165, 94, 149, 84, 163, 154, 123, 109, 110,
	83, 0, 143, 99, 103, 98, 132, 160, 161, 97,
	182, 88, 172, 86, 89, 171, 130, 158, 164, 124,
	121, 85, 162, 122, 120, 112, 101, 106, 137, 119,
	138, 107, 127, 126, 128, 0, 0, 0, 153, 169,
	183, 91, 0, 0, 175, 176, 177, 178, 179, 0,
	0, 92, 129, 90, 108, 150, 111, 118, 142, 181,
	134, 147, 95, 168, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 81, 100, 115, 180, 141, 102, 170, 114,
	0, 116, 0, 0, 152, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 502, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 139, 0, 155, 105, 113, 0,
	87, 0, 104, 131, 144, 148, 0, 0, 0, 96,
	0, 146, 135, 167, 0, 136, 145, 117, 159, 140,
	166, 199, 174, 157, 173, 82, 156, 165, 94, 149,
	84, 163, 154, 123, 109, 110, 83, 0, 143, 99,
	103, 98, 132, 160, 161, 97, 182, 88, 172, 86,
	89, 171, 130, 158, 164, 124, 121, 85, 162, 122,
	120, 112, 101, 106, 137, 119, 138, 107, 127, 126,
	128, 0, 0, 0, 153, 169, 183, 91, 0, 0,
	175, 176, 177, 178, 179, 0, 0, 92, 129, 90,
	108, 150, 111, 118, 142, 181, 134, 147, 95, 168,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 81, 0,
	115, 180, 141, 102, 170, 575, 100, 0, 0, 0,
	0, 0, 114, 0, 116, 0, 0, 152, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 139, 0, 155,
	105, 113, 0, 87, 0, 104, 131, 144, 148, 0,
	0, 0, 96, 0, 146, 135, 167, 0, 136, 145,
	117, 159, 140, 166, 199, 174, 157, 173, 82, 156,
	165, 94, 149, 84, 163, 154, 123, 109, 110, 83,
	0, 143, 99, 103, 98, 132, 160, 161, 97, 182,
	88, 172, 86, 89, 171, 130, 158, 164, 124, 121,
	85, 162, 122, 120, 112, 101, 106, 137, 119, 138,
	107, 127, 126, 128, 0, 0, 0, 153, 169, 183,
	91, 0, 0, 175, 176, 177, 178, 179, 0, 0,
	92, 129, 90, 108, 150, 111, 118, 142, 181, 134,
	147, 95, 168, 151, 0, 0, 317, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 81, 100, 115, 180, 141, 102, 170, 114, 0,
	116, 0, 0, 152, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 139, 0, 155, 105, 113, 0, 87,
	0, 104, 131, 144, 148, 0, 0, 0, 96, 0,
	146, 135, 167, 0, 136, 145, 117, 159, 140, 166,
	199, 174, 157, 173, 82, 156, 165, 94, 149, 84,
	163, 154, 123, 109, 110, 83, 0, 143, 99, 103,
	98, 132, 160, 161, 97, 182, 88, 172, 86, 89,
	171, 130, 158, 164, 124, 121, 85, 162, 122, 120,
	112, 101, 106, 137, 119, 138, 107, 127, 126, 128,
	0, 0, 0, 153, 169, 183, 91, 0, 0, 175,
	176, 177, 178, 179, 0, 0, 92, 129, 90, 108,
	150, 111, 118, 142, 181, 134, 147, 95, 168, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 81, 100, 115,
	180, 141, 102, 170, 114, 0, 116, 0, 0, 152,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 198, 0, 0, 0, 0, 139,
	0, 155, 105, 113, 0, 87, 0, 104, 131, 144,
	148, 0, 0, 0, 96, 0, 146, 135, 167, 0,
	136, 145, 117, 159, 140, 166, 199, 174, 157, 173,
	82, 156, 165, 94, 149, 84, 163, 154, 123, 109,
	110, 83, 0, 143, 99, 103, 98, 132, 160, 161,
	97, 182, 88, 172, 86, 89, 171, 130, 158, 164,
	124, 121, 85, 162, 122, 120, 112, 101, 106, 137,
	119, 138, 107, 127, 126, 128, 0, 0, 0, 153,
	169, 183, 91, 0, 0, 175, 176, 177, 178, 179,
	0, 0, 92, 129, 90, 108, 150, 111, 118, 142,
	181, 134, 147, 95, 168, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 81, 100, 115, 180, 141, 102, 170,
	114, 0, 116, 0, 0, 152, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 0, 0, 139, 0, 155, 105, 113,
	0, 87, 0, 104, 131, 144, 148, 0, 0, 0,
	96, 0, 146, 135, 167, 0, 136, 145, 117, 159,
	140, 166, 199, 174, 157, 173, 82, 156, 165, 94,
	149, 84, 163, 154, 123, 109, 110, 83, 0, 143,
	99, 103, 98, 132, 160, 161, 97, 182, 88, 172,
	86, 89, 171, 130, 158, 164, 124, 121, 85, 162,
	122, 120, 112, 101, 106, 137, 119, 138, 107, 127,
	126, 128, 0, 0, 0, 153, 169, 183, 91, 0,
	0, 175, 176, 177, 178, 179, 0, 0, 92, 129,
	90, 108, 150, 111, 118, 142, 181, 134, 147, 95,
	168, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 81,
	100, 115, 180, 141, 102, 170, 114, 0, 116, 0,
	0, 152, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 0,
	0, 139, 0, 155, 105, 113, 0, 87, 0, 104,
	131, 144, 148, 0, 0, 0, 96, 0, 146, 135,
	167, 0, 136, 145, 117, 159, 140, 166, 199, 174,
	157, 173, 82, 156, 165, 94, 149, 84, 163, 154,
	123, 109, 110, 83, 0, 143, 99, 103, 98, 132,
	160, 161, 97, 182, 88, 172, 86, 89, 171, 130,
	158, 164, 124, 121, 85, 162, 122, 120, 112, 101,
	106, 137, 119, 138, 107, 127, 126, 128, 0, 0,
	0, 153, 169, 183, 91, 0, 0, 175, 176, 177,
	178, 179, 0, 0, 92, 129, 90, 108, 150, 111,
	118, 142, 181, 134, 147, 95, 168, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 81, 100, 115, 180, 141,
	102, 170, 114, 0, 116, 0, 0, 152, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 139, 0, 155,
	105, 113, 0, 87, 0, 104, 131, 144, 148, 0,
	0, 0, 96, 0, 146, 135, 167, 0, 136, 145,
	117, 159, 140, 166, 199, 174, 157, 173, 82, 156,
	165, 94, 149, 84, 163, 154, 123, 109, 110, 83,
	0, 143, 99, 103, 98, 132, 160, 161, 97, 182,
	88, 172, 86, 89, 171, 130, 158, 164, 124, 121,
	85, 162, 122, 120, 112, 101, 106, 137, 119, 138,
	107, 127, 126, 128, 0, 0, 0, 153, 169, 183,
	91, 0, 0, 175, 176, 177, 178, 179, 0, 0,
	92, 129, 90, 108, 150, 111, 118, 142, 181, 134,
	147, 95, 168, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 115, 180, 141, 102, 170,
}
var yyPact = [...]int{

	1599, -1000, -183, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 869, 924, -1000, -1000, -1000, -1000, -1000, -1000, 247,
	7604, 79, 97, 8, 10341, 94, 140, 10793, -1000, -3,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -73, -74, 625,
	-1000, -1000, -1000, -1000, -1000, 859, 866, 685, 851, 757,
	-1000, 5947, 54, 9204, 10115, 5224, -1000, -1000, 211, 10793,
	89, 10793, -150, 10567, 52, 52, 52, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 93, 10793, -1000, 10793, 51, 531,
	51, 51, 51, 10793, -1000, 126, -1000, -1000, -1000, -1000,
	10793, 521, 792, 45, 3192, 3192, 3192, 3192, 2, 3192,
	-70, 704, 883, -1000, -1000, -1000, -1000, -1000, 3192, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 473, 837, 6673, 6673, 869, -1000, 625, -1000, -1000,
	-1000, 818, -1000, -1000, 261, 895, -1000, 7378, 120, -1000,
	6673, 1276, 636, -1000, -1000, 636, -1000, -1000, 108, -1000,
	-1000, 7137, 7137, 7137, 7137, 7137, 7137, 7137, 7137, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 636, -1000, 6432, 636, 636, 636, 636,
	636, 636, 636, 636, 6673, 636, 636, 636, 636, 636,
	636, 636, 636, 636, 636, 636, 636, 636, 9889, 575,
	678, -1000, -1000, -1000, 841, 8294, 8978, 10793, 616, -1000,
	604, 4970, -118, -1000, -1000, -1000, 196, 8752, -1000, -1000,
	-1000, 790, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 530, 10793, -1000, 1961,
	-1000, 520, 3192, 64, 659, 512, 225, 505, 10793, 10793,
	3192, 58, 10793, 846, 703, 10793, 503, 501, -1000, 4716,
	-1000, 3192, 3192, 3192, 3192, 3192, 3192, 3192, 3192, -1000,
	-1000, -1000, -1000, -1000, -1000, 3192, 3192, -1000, 893, 219,
	-1000, -1000, 10793, 6673, -1000, -1000, -1000, -1000, -1000, -1000,
	918, 155, 354, 118, 623, -1000, 231, 859, 473, 757,
	8520, 714, -1000, -1000, 10793, -1000, 6673, 6673, 392, -1000,
	9656, -1000, -1000, 3700, 162, 7137, 307, 182, 7137, 7137,
	7137, 7137, 7137, 7137, 7137, 7137, 7137, 7137, 7137, 7137,
	7137, 7137, 7137, 358, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 489, -1000, 625, 746, 746, 139, 139, 139,
	139, 139, 139, 139, 2162, 5465, 473, 518, 242, 6432,
	5947, 5947, 6673, 6673, 11019, 11019, 5947, 852, 210, 242,
	11019, -1000, 473, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5947, 5947, 5947, 5947, 18, 10793, -1000, 11019, 9204, 9204,
	9204, 9204, 9204, -1000, 739, 736, -1000, 749, 747, 774,
	10793, -1000, 511, 8294, 124, 636, -1000, 9430, -1000, -1000,
	18, 556, 9204, 10793, -1000, -1000, 4462, 604, -118, 571,
	-1000, -95, -104, 6188, 134, -1000, -1000, -1000, -1000, 2938,
	156, 537, 264, -61, -1000, -1000, -1000, 640, -1000, 640,
	640, 640, 640, -29, -29, -29, -29, -1000, -1000, -1000,
	-1000, -1000, 657, 656, -1000, 640, 640, 640, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 654, 654, 654, 641, 641, 660,
	-1000, 10793, -167, 485, 3192, 844, 3192, -1000, 76, -1000,
	10793, -1000, -1000, 10793, 3192, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10793, 292, 10793, 10793, -1000, 242, -1000, 750, 6673, 6673,
	4208, 6673, -1000, -1000, -1000, 837, -1000, 852, 864, -1000,
	777, 776, 5947, -1000, -1000, 162, 207, -1000, -1000, 338,
	-1000, -1000, -1000, -1000, 117, 636, -1000, 1817, -1000, -1000,
	-1000, -1000, 307, 7137, 7137, 7137, 386, 1817, 1782, 731,
	1327, 139, 294, 294, 136, 136, 136, 136, 136, 435,
	435, -1000, -1000, -1000, 473, -1000, -1000, -1000, 473, 5947,
	585, -1000, -1000, 6673, -1000, 473, 500, 500, 278, 313,
	634, -1000, 113, 631, 500, 5947, 291, -1000, 6673, 473,
	-1000, 500, 473, 500, 500, 538, 636, -1000, 606, -1000,
	194, 678, 653, 701, 1261, -1000, -1000, -1000, -1000, 719,
	-1000, 716, -1000, -1000, -1000, -1000, -1000, 87, 81, 68,
	10567, -1000, 880, 9204, 598, -1000, -1000, 571, -118, -87,
	-1000, -1000, -1000, 242, -1000, 364, 570, 2684, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 648, 483, -1000, 832, 168,
	184, 449, 819, -1000, -1000, -1000, 794, -1000, 240, -65,
	-1000, -1000, 356, -29, -29, -1000, -1000, 134, 785, 134,
	134, 134, 376, 376, -1000, -1000, -1000, -1000, 342, -1000,
	-1000, -1000, 323, -1000, 677, 10567, 3192, -1000, 3954, -1000,
	-1000, -1000, -1000, -1000, -1000, 341, 283, 205, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16,
	-1000, 3192, -1000, 219, -1000, 375, 6673, -1000, -1000, 760,
	242, 242, 112, -1000, -1000, 10793, -1000, -1000, -1000, -1000,
	618, -1000, -1000, -1000, 3446, 5947, -1000, 386, 1817, 1425,
	-1000, 7137, 7137, -1000, -1000, 500, 5947, 242, -1000, -1000,
	-1000, 57, 358, 57, 7137, 7137, 4208, 7137, 7137, -160,
	586, 187, -1000, 6673, 275, -1000, -1000, -1000, -1000, -1000,
	673, 11019, 636, -1000, 8062, 10567, 869, 11019, 6673, 6673,
	-1000, -1000, 6673, 645, -1000, 6673, -1000, -1000, -1000, 636,
	636, 636, 468, -1000, 869, 598, -1000, -1000, -1000, -124,
	-136, -1000, -1000, -1000, 2938, -1000, 2938, 10567, 34, -1000,
	446, 407, -1000, -1000, 642, 664, 39, -1000, -1000, -1000,
	534, 134, 134, -1000, 178, -1000, -1000, -1000, 497, -1000,
	493, 569, 472, 10793, -1000, -1000, 567, -1000, 188, -1000,
	-1000, 10567, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10567, 10793, -1000, -1000, -1000, -1000,
	-1000, 10567, -1000, 292, -1000, 242, -1000, 3954, -1000, 880,
	9204, -1000, -1000, 473, -1000, 7137, 1817, 1817, -1000, -1000,
	473, 640, 640, -1000, 640, 641, -1000, 640, -12, 640,
	-13, 473, 473, 1356, 1767, -1000, 1291, 1736, 636, -157,
	-1000, 242, 6673, -1000, 834, 547, 559, -1000, -1000, 5706,
	473, 470, 111, 468, 859, -1000, 242, 242, 242, 10567,
	242, 10567, 10567, 10567, 7830, 10567, 859, -1000, -1000, -1000,
	-1000, 2684, -1000, 458, -1000, 640, -1000, -1000, -1000, 10567,
	-57, 916, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -29, 372, -29, 322, -1000, 302, 3192,
	3954, 2938, -1000, 639, -1000, -1000, -1000, -1000, 840, -1000,
	877, 564, -1000, 1817, -1000, -1000, 96, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7137, 7137, -1000, 7137,
	7137, 7137, 473, 368, 242, 817, -1000, 636, -1000, -1000,
	594, 10567, 10567, -1000, -1000, 456, -1000, 454, 454, 454,
	124, -1000, -1000, 119, 10567, -1000, 444, 161, -1000, -140,
	134, -1000, 134, 533, 519, -1000, -1000, -1000, 10567, 636,
	874, 863, -1000, -1000, 1564, 1564, 1564, 1564, 21, -1000,
	-1000, 915, -1000, 636, -1000, 625, 106, -1000, 10567, -1000,
	-1000, -1000, -1000, -1000, 119, -1000, 394, 177, 365, -1000,
	31, 249, 812, -1000, 808, -1000, -1000, -1000, -1000, -1000,
	442, 14, -1000, 6673, 6673, -1000, -1000, -1000, -1000, 473,
	41, -171, 11019, 559, 473, 10567, -1000, -1000, -1000, 282,
	-1000, -1000, 10793, -1000, 363, -1000, -1000, 659, 419, -1000,
	10567, 242, 557, -1000, 751, -165, -175, 553, -1000, -1000,
	-1000, 638, -1000, -167, -1000, 14, 769, -1000, 743, -1000,
	10567, -1000, -1000, 11, -169, 393, 9, -173, 662, 636,
	-176, 655, -1000, 906, 6905, -1000, -1000, 908, 186, 186,
	1564, 473, -1000, -1000, -1000, 38, 312, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1118, 1117, 21, 447, 1116, 1115, 1114, 1113, 1112,
	1111, 1108, 1107, 1106, 1104, 1103, 1094, 1086, 1085, 1083,
	1081, 1080, 1079, 1078, 1075, 109, 1073, 1072, 1070, 59,
	1069, 69, 1066, 1065, 40, 307, 44, 41, 1013, 1064,
	20, 101, 87, 1063, 47, 1061, 1058, 73, 1057, 54,
	1054, 1053, 111, 1052, 1051, 12, 18, 1050, 1048, 1046,
	1045, 60, 253, 1044, 1043, 1041, 1036, 1035, 1033, 50,
	6, 10, 36, 15, 1028, 339, 9, 1022, 48, 1021,
	1020, 1019, 1018, 34, 1017, 68, 1016, 16, 61, 1015,
	14, 56, 27, 24, 5, 67, 53, 1012, 28, 51,
	45, 1010, 1004, 367, 1002, 1001, 42, 993, 25, 152,
	360, 991, 990, 989, 986, 43, 0, 643, 338, 62,
	985, 983, 982, 1509, 57, 58, 17, 974, 33, 180,
	39, 973, 972, 30, 970, 969, 968, 967, 966, 964,
	963, 154, 962, 961, 960, 29, 37, 959, 957, 52,
	19, 955, 954, 953, 49, 55, 952, 951, 63, 950,
	949, 948, 947, 946, 26, 32, 944, 11, 941, 7,
	940, 23, 939, 3, 938, 13, 937, 8, 936, 4,
	46, 1, 934, 2, 444, 698, 932, 931, 930, 75,
}
var yyR1 = [...]int{

	0, 1, 186, 186, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 3, 3, 3, 7, 4, 5, 5,
	6, 6, 8, 8, 28, 28, 9, 10, 10, 10,
	187, 187, 47, 47, 91, 91, 11, 11, 11, 11,
	96, 96, 100, 100, 100, 101, 101, 101, 101, 131,
	131, 12, 12, 12, 12, 12, 12, 12, 12, 179,
	179, 178, 177, 177, 176, 176, 175, 17, 160, 162,
	162, 161, 161, 161, 161, 155, 134, 134, 134, 134,
	137, 137, 135, 135, 135, 135, 135, 135, 135, 136,
	136, 136, 136, 136, 138, 138, 138, 138, 138, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 140, 140, 140, 140, 140, 140,
	140, 140, 154, 154, 141, 141, 149, 149, 150, 150,
	150, 147, 147, 148, 148, 151, 151, 151, 142, 142,
	142, 142, 142, 142, 142, 144, 144, 152, 152, 145,
	145, 145, 146, 146, 146, 153, 153, 153, 153, 153,
	143, 143, 156, 156, 170, 170, 169, 169, 169, 159,
	159, 166, 166, 166, 166, 166, 158, 158, 168, 168,
	167, 157, 157, 171, 171, 171, 171, 182, 183, 181,
	181, 181, 181, 181, 163, 163, 163, 164, 164, 164,
	165, 165, 165, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 174, 172, 172, 173, 173, 14, 15,
	15, 15, 15, 15, 16, 16, 18, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 107, 107, 105, 105, 106, 106,
	106, 108, 108, 108, 132, 132, 132, 20, 20, 22,
	22, 23, 24, 21, 21, 21, 21, 21, 21, 21,
	188, 25, 26, 26, 27, 27, 27, 31, 31, 31,
	29, 29, 30, 30, 36, 36, 35, 35, 37, 37,
	37, 37, 120, 120, 120, 119, 119, 39, 39, 40,
	40, 41, 41, 42, 42, 42, 54, 54, 90, 90,
	92, 92, 43, 43, 43, 43, 44, 44, 45, 45,
	46, 46, 127, 127, 126, 126, 126, 125, 125, 48,
	48, 48, 50, 49, 49, 49, 49, 51, 51, 53,
	53, 52, 52, 55, 55, 55, 55, 56, 56, 38,
	38, 38, 38, 38, 38, 38, 104, 104, 58, 58,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	68, 68, 68, 68, 68, 68, 59, 59, 59, 59,
	59, 59, 59, 34, 34, 69, 69, 69, 75, 70,
	70, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 66, 66, 66, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 65, 65, 65, 65, 65, 65, 65, 65, 189,
	189, 67, 67, 67, 67, 32, 32, 32, 32, 32,
	130, 130, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 79, 79, 33, 33, 77,
	77, 78, 80, 80, 76, 76, 76, 61, 61, 61,
	61, 61, 61, 61, 61, 63, 63, 63, 81, 81,
	82, 82, 83, 83, 84, 84, 85, 86, 86, 86,
	87, 87, 87, 87, 88, 88, 88, 60, 60, 60,
	60, 60, 60, 89, 89, 89, 89, 93, 93, 71,
	71, 73, 73, 72, 74, 94, 94, 98, 95, 95,
	99, 99, 99, 97, 97, 97, 122, 122, 122, 102,
	102, 109, 109, 110, 110, 103, 103, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 112, 112, 112,
	113, 113, 114, 114, 114, 121, 121, 117, 117, 118,
	118, 123, 123, 124, 124, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 184, 185, 128, 129, 129, 129,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 2, 8, 4, 6, 5, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 1, 3,
	2, 3, 1, 10, 11, 11, 12, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 7, 5, 4, 2, 2, 4, 4, 2, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 3, 3,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 6, 8, 8, 6, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -7, -8, -9, -10, -11, -12,
	-13, -14, -15, -16, -18, -19, -20, -22, -23, -24,
	-21, -4, -5, 6, 7, -28, 9, 10, 30, -17,
	114, 115, 117, 116, 147, 118, 140, 50, 159, 160,
	162, 163, 25, 141, 142, 145, 146, 31, 32, -184,
	8, 244, 54, -186, 259, -83, 15, -27, 5, -25,
	-188, -25, -25, -25, -25, -25, -160, -162, 54, 89,
	-114, 123, 71, 155, 236, 120, 121, 127, -117, 57,
	-116, 252, 159, 170, 164, 191, 183, 134, 181, 184,
	223, 211, 221, 66, 162, 232, 143, 179, 175, 173,
	27, 196, 257, 174, 136, 131, 197, 201, 224, 168,
	169, 226, 195, 132, 33, 254, 35, 151, 227, 199,
	194, 190, 193, 167, 189, 39, 203, 202, 204, 222,
	186, 137, 176, 18, 230, 146, 149, 198, 200, 128,
	153, 256, 228, 172, 138, 150, 145, 231, 139, 163,
	225, 234, 38, 208, 166, 130, 160, 157, 187, 152,
	177, 178, 192, 165, 188, 161, 154, 147, 233, 209,
	258, 185, 182, 158, 156, 214, 215, 216, 217, 218,
	255, 229, 180, 210, -103, 123, 125, 121, 121, 122,
	123, 236, 120, 121, -52, -123, 57, -116, 123, 155,
	121, 107, 184, 114, 212, 122, 33, 153, -132, 121,
	-105, 156, 211, 214, 215, 216, 218, 217, 57, 225,
	224, 219, -123, 161, -128, -128, -128, -128, -128, 213,
	213, -3, -87, 17, 16, -6, -4, -184, 6, 20,
	21, -31, 40, 41, -26, -37, 98, -38, -123, -57,
	73, -62, 29, 57, -116, 23, -61, -58, -76, -74,
	-75, 107, 108, 109, 96, 97, 104, 74, 110, -66,
	-64, -65, -67, 59, 58, 67, 60, 61, 62, 63,
	68, 69, 70, -117, -72, -184, 44, 45, 245, 246,
	247, 248, 251, 249, 76, 34, 235, 243, 242, 241,
	239, 240, 237, 238, 126, 236, 102, 244, -103, -40,
	-41, -42, -43, -54, -75, -184, -52, 11, -47, -52,
	-95, -131, 161, -99, 225, 224, -118, -97, -117, -115,
	223, 184, 222, 119, 72, 22, 24, 206, 75, 107,
	16, 76, 106, 245, 114, 48, 237, 238, 235, 247,
	248, 236, 212, 29, 10, 25, 141, 21, 100, 116,
	79, 80, 144, 23, 142, 70, 19, 51, 11, 13,
	14, 126, 125, 91, 122, 46, 8, 110, 26, 88,
	42, 28, 44, 89, 17, 239, 240, 31, 251, 148,
	102, 49, 36, 73, 68, 52, 71, 15, 47, 90,
	117, 244, 45, 120, 6, 250, 30, 140, 43, 121,
	213, 78, 124, 69, 5, 127, 32, 9, 50, 53,
	241, 242, 243, 34, 77, 12, -161, 89, -155, 57,
	-52, 122, -52, 244, -117, -110, 126, -110, -110, 121,
	-52, -52, -109, 126, 57, -109, -109, -109, -52, 111,
	-52, 57, 30, 236, 57, 153, 121, 154, 123, -129,
	-184, -118, -129, -129, -129, 157, 158, -129, 221, -107,
	213, 220, 52, 12, -129, -128, -128, -185, 56, -88,
	19, 31, -38, -123, -84, -85, -38, -83, -3, -25,
	36, -29, 21, 65, 11, -120, 72, 71, 88, -119,
	22, -117, 59, 111, -38, -59, 91, 73, 89, 90,
	75, 93, 92, 103, 96, 97, 98, 99, 100, 101,
	102, 94, 95, 106, 81, 82, 83, 84, 85, 86,
	87, -104, -184, -75, -184, 112, 113, -62, -62, -62,
	-62, -62, -62, -62, -62, -184, -3, -70, -38, -184,
	-184, -184, -184, -184, -184, -184, -184, -184, -79, -38,
	-184, -189, -184, -189, -189, -189, -189, -189, -189, -189,
	-184, -184, -184, -184, -53, 26, -52, 30, 55, -48,
	-50, -49, -51, 42, 46, 48, 43, 44, 45, 49,
	-127, 22, -40, -184, -126, 149, -125, 22, -123, 59,
	-52, -47, -187, 55, 11, 53, 55, -95, 161, -96,
	-100, 226, 228, 81, -122, -117, 59, 29, 30, 56,
	55, -52, -134, -137, -139, -138, -140, -135, -136, 181,
	182, 107, 185, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 30, 143, 177, 178, 179, 180, 197,
	198, 199, 200, 201, 202, 203, 204, 164, 165, 166,
	167, 168, 169, 170, 172, 173, 174, 175, 176, 57,
	-129, 123, -179, 53, 57, 73, 57, -52, -52, -129,
	124, -52, 23, 52, -52, 57, 57, -124, -123, -115,
	-129, -129, -129, -129, -129, -129, -129, -129, -129, -129,
	11, -106, 11, 91, -52, -38, 9, 91, 55, 18,
	111, 55, -86, 24, 25, -87, -185, -31, -63, -117,
	60, 63, -30, 43, -52, -38, -38, -68, 68, 73,
	69, 70, -119, 98, -124, -118, -115, -62, -69, -72,
	-75, 64, 91, 89, 90, 75, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -130, 57, 59, 57, -61, -61, -117, -36, 21,
	-35, -37, -185, 55, -185, -3, -35, -35, -38, -38,
	-76, -117, -123, -76, -35, -29, -77, -78, 77, -76,
	-185, -35, -36, -35, -35, -91, 149, -52, -94, -98,
	-76, -41, -42, -42, -41, -42, 42, 42, 42, 47,
	42, 47, 42, -49, -123, -185, -55, 50, 125, 51,
	-184, -125, -91, 53, -40, -52, -99, -96, 55, 227,
	229, 230, 52, -38, -146, 106, -163, -164, -165, -118,
	59, 60, -155, -156, -157, -166, 135, -171, 128, 130,
	127, -158, 136, 122, 28, 56, -151, 68, 73, -147,
	209, -141, 54, -141, -141, -141, -141, -145, 184, -145,
	-145, -145, 54, 54, -141, -141, -141, -149, 54, -149,
	-149, -150, 54, -150, -121, 53, -52, -177, 255, -178,
	57, -129, 23, -129, -111, 119, 116, 117, -174, 115,
	206, 184, 66, 29, 15, 245, 149, 258, 57, 150,
	-52, -52, -129, -52, -108, 89, 12, -123, -123, 38,
	-38, -38, -124, -85, -88, -102, 19, 11, 34, 34,
	-35, 68, 69, 70, 111, -184, -69, -62, -62, -62,
	-34, 144, 72, -185, -185, -35, 55, -38, -185, -185,
	-185, 55, 53, 22, 55, 11, 111, 55, 11, -185,
	-35, -80, -78, 79, -38, -185, -185, -185, -185, -185,
	-60, 30, 34, -3, -184, -184, -56, 55, 12, 81,
	-45, -44, 52, 53, -46, 52, -44, 42, 42, 122,
	122, 122, -92, -117, -56, -40, -56, -100, -101, 231,
	228, 234, 57, 59, 55, -165, 81, 54, 57, 28,
	-158, -158, 57, 57, 28, -142, 29, 68, -148, 210,
	60, -145, -145, -146, 30, -146, -146, -146, -154, 59,
	-154, 60, 60, 52, -117, -129, -176, -175, -118, -128,
	-180, 155, 129, 135, 136, 131, 57, 122, 28, 128,
	130, 149, 127, -180, 155, -112, -113, 124, 22, 122,
	28, 149, -129, -106, 59, -38, 39, 111, -52, -39,
	11, 98, -118, -36, -34, 72, -62, -62, -185, -37,
	-133, 107, 181, 143, 179, 175, 195, 186, 208, 177,
	209, -130, -133, -62, -62, -118, -62, -62, 252, -83,
	80, -38, 78, -93, 52, -94, -71, -73, -72, -184,
	-3, -89, -117, -92, -83, -98, -38, -38, -38, 54,
	-38, -184, -184, -184, -185, 55, -83, -56, 228, 232,
	233, -164, -165, -168, -167, -117, -171, 57, 57, 54,
	-144, 52, 59, 60, 61, 68, 235, 67, 56, -146,
	-146, 57, 107, 56, 55, 56, 55, 56, 55, -52,
	55, 81, -128, -117, -128, -117, -52, -128, -117, -108,
	-56, -40, -185, -62, -185, -141, -141, -141, -150, -141,
	169, -141, 169, -185, -185, -185, 55, 19, -185, 55,
	19, -184, -33, 250, -38, 27, -93, 55, -185, -185,
	-185, 55, 111, -185, -87, -90, -117, -90, -90, -90,
	-126, -117, -87, 56, 55, -141, -90, -152, 206, 9,
	-145, 59, -145, 60, 60, -129, -175, -165, 54, 26,
	-81, 13, -145, 57, -62, -62, -62, -62, -62, -185,
	59, 28, -73, 34, -3, -184, -117, -117, 55, 56,
	-185, -185, -185, -55, -170, -169, 53, 132, 66, -167,
	56, -153, 128, 28, 127, 235, -146, -146, 56, 56,
	-90, -184, -82, 14, 16, -185, -185, -185, -185, -32,
	91, 255, 9, -71, -3, 111, -117, -169, 57, -159,
	81, 59, 138, -143, 66, 28, 28, 56, -172, -173,
	149, -38, -70, -185, 253, 49, 256, -94, -185, -117,
	60, -52, 59, -179, -185, 55, -117, 39, 254, 257,
	54, -177, -173, 34, 39, -90, 151, 255, 56, 152,
	256, -182, -183, 52, -184, 257, -183, 52, 10, 9,
	-62, 148, -181, 139, 134, 137, 30, -181, -185, -185,
	133, 29, 68,
}
var yyDef = [...]int{

	22, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 532, 0, 300, 300, 300, 300, 300, 300, 0,
	602, 585, 0, 0, 0, 0, -2, 288, 289, 0,
	291, 292, 815, 815, 815, 815, 815, 0, 0, 0,
	34, 35, 813, 1, 3, 540, 0, 0, 304, 307,
	302, 0, 585, 0, 0, 0, 61, 62, 0, 0,
	0, 801, 0, 802, 583, 583, 583, 603, 604, 607,
	608, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 0, 0, 586, 0, 581, 0,
	581, 581, 581, 0, 245, 371, 611, 612, 801, 802,
	0, 0, 0, 0, 816, 816, 816, 816, 0, 816,
	0, 264, 265, 268, 269, 270, 271, 272, 816, 285,
	286, 277, 287, 290, 293, 294, 295, 296, 297, 815,
	815, 28, 544, 0, 0, 532, 30, 0, 300, 305,
	306, 310, 308, 309, 301, 0, 318, 322, 0, 379,
	0, 384, 386, -2, -2, 0, 421, 422, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 449,
	450, 451, 452, 517, 518, 519, 520, 521, 522, 523,
	524, 388, 389, 514, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 505, 0, 479, 479, 479, 479,
	479, 479, 479, 479, 0, 0, 0, 0, 0, 0,
	329, 331, 332, 333, 352, 0, 354, 0, 0, 42,
	46, 0, 792, 568, -2, -2, 0, 0, 609, 610,
	-2, 716, -2, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 0, 0, 81, 0,
	79, 0, 816, 0, 69, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	246, 816, 816, 816, 816, 816, 816, 816, 816, 255,
	817, 818, 256, 257, 258, 816, 816, 260, 0, 278,
	274, 275, 0, 0, 273, 298, 299, 29, 814, 23,
	0, 0, 541, 0, 533, 534, 537, 540, 28, 307,
	0, 312, 311, 303, 0, 319, 0, 0, 0, 323,
	0, 325, 326, 0, 382, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 406, 407, 408, 409, 410, 411,
	412, 385, 0, 399, 0, 0, 0, 441, 442, 443,
	444, 445, 446, 447, 0, 314, 28, 0, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 506,
	0, 471, 0, 472, 473, 474, 475, 476, 477, 478,
	0, 314, 0, 0, 44, 0, 370, 0, 0, 0,
	0, 0, 0, 359, 0, 0, 362, 0, 0, 0,
	0, 353, 0, 0, 373, 763, 355, 0, 357, 358,
	-2, 0, 0, 0, 40, 41, 0, 47, 792, 49,
	50, 0, 0, 0, 162, 576, 577, 578, 574, 204,
	0, 0, 145, 141, 87, 88, 89, 134, 91, 134,
	134, 134, 134, 159, 159, 159, 159, 117, 118, 119,
	120, 121, 0, 0, 104, 134, 134, 134, 108, 124,
	125, 126, 127, 128, 129, 130, 131, 92, 93, 94,
	95, 96, 97, 98, 136, 136, 136, 138, 138, 605,
	64, 0, 72, 0, 816, 0, 816, 77, 0, 220,
	0, 239, 582, 0, 816, 242, 243, 372, 613, 614,
	247, 248, 249, 250, 251, 252, 253, 254, 259, 263,
	0, 281, 0, 0, 267, 266, 545, 0, 0, 0,
	0, 0, 536, 538, 539, 544, 31, 310, 0, 525,
	0, 0, 0, 313, 26, 380, 381, 383, 400, 0,
	402, 404, 324, 320, 0, 515, -2, 390, 391, 415,
	416, 417, 0, 0, 0, 0, 413, 395, 0, 426,
	427, 428, 429, 430, 431, 432, 433, 434, 435, 436,
	437, 440, 490, 491, 0, 438, 439, 448, 0, 0,
	315, 316, 418, 0, 563, 28, 0, 0, 0, 0,
	0, 514, 0, 0, 0, 0, 512, 509, 0, 0,
	480, 0, 0, 0, 0, 0, 0, 369, 377, 565,
	0, 330, 348, 350, 0, 345, 360, 361, 363, 0,
	365, 0, 367, 368, 334, 335, 336, 0, 0, 0,
	0, 356, 377, 0, 377, 43, 569, 48, 0, 0,
	53, 54, 570, 571, 572, 0, 78, 205, 207, 210,
	211, 212, 82, 83, 84, 0, 0, 192, 0, 0,
	0, 0, 0, 186, 187, 80, 148, 146, 0, 143,
	142, 90, 0, 159, 159, 111, 112, 162, 0, 162,
	162, 162, 0, 0, 105, 106, 107, 99, 0, 100,
	101, 102, 0, 103, 0, 0, 816, 66, 0, 70,
	71, 67, 584, 68, 815, 0, 0, 597, 221, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 0,
	238, 816, 241, 278, 262, 0, 0, 279, 280, 0,
	542, 543, 0, 535, 24, 0, 579, 580, 526, 527,
	327, 401, 403, 405, 0, 314, 392, 413, 396, 0,
	393, 0, 0, 387, 453, 0, 0, 420, -2, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	532, 0, 510, 0, 0, 470, 481, 482, 483, 484,
	557, 0, 0, -2, 0, 0, 532, 0, 0, 0,
	342, 349, 0, 0, 343, 0, 344, 364, 366, 0,
	0, 0, 0, 340, 532, 377, 39, 51, 52, 0,
	0, 58, 163, 164, 0, 208, 0, 0, 0, 181,
	0, 0, 184, 185, 0, 155, 0, 147, 86, 144,
	0, 162, 162, 113, 0, 114, 115, 116, 0, 132,
	0, 0, 0, 0, 606, 65, 73, 74, 0, 213,
	815, 0, 222, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 815, 0, 0, 815, 598, 599, 600,
	601, 0, 240, 281, 282, 283, 546, 0, 25, 377,
	0, 321, 516, 0, 394, 0, 414, 397, 454, 317,
	0, 134, 134, 495, 134, 138, 498, 134, 500, 134,
	503, 0, 0, 0, 0, 515, 0, 0, 0, 507,
	469, 513, 0, 32, 0, 557, 547, 559, 561, 0,
	28, 0, 553, 0, 540, 566, 378, 567, 346, 0,
	351, 0, 0, 0, 354, 0, 540, 38, 55, 56,
	57, 206, 209, 0, 188, 134, 191, 182, 183, 0,
	157, 0, 149, 150, 151, 152, 153, 154, 135, 109,
	110, 160, 161, 159, 0, 159, 0, 139, 0, 816,
	0, 0, 214, 0, 215, 217, 218, 219, 0, 261,
	528, 328, 455, 398, 458, 492, 159, 496, 497, 499,
	501, 502, 504, 460, 459, 461, 0, 0, 464, 0,
	0, 0, 0, 0, 511, 0, 33, 0, 562, -2,
	0, 0, 0, 45, 36, 0, 338, 0, 0, 0,
	373, 341, 37, 173, 0, 190, 0, 165, 158, 0,
	162, 133, 162, 0, 0, 63, 75, 76, 0, 0,
	530, 0, 493, 494, 0, 0, 0, 0, 485, 468,
	508, 0, 560, 0, -2, 0, 555, 554, 0, 347,
	374, 375, 376, 337, 172, 174, 0, 179, 0, 189,
	0, 170, 0, 167, 169, 156, 122, 123, 137, 140,
	0, 0, 27, 0, 0, 462, 463, 465, 466, 0,
	0, 0, 0, 550, 28, 0, 339, 175, 176, 0,
	180, 178, 0, 85, 0, 166, 168, 69, 0, 234,
	0, 531, 529, 467, 0, 0, 0, 558, -2, 556,
	177, 0, 171, 72, 233, 0, 0, 486, 0, 489,
	0, 216, 235, 0, 487, 0, 0, 0, 193, 0,
	0, 194, 195, 0, 0, 488, 196, 0, 0, 0,
	0, 0, 197, 199, 200, 0, 0, 198, 236, 237,
	201, 202, 203,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	54, 56, 98, 96, 55, 97, 111, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 259,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			setParseTree(yylex, yyDollar[1].statement())
		}
		yyVAL.val = yyLocal
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = yyDollar[1].selStmt()
		}
		yyVAL.val = yyLocal
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			setParseTree(yylex, nil)
		}
		yyVAL.val = yyLocal
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.selStmt()
		{
			sel := yyDollar[1].selStmt().(*Select)
			sel.OrderBy = yyDollar[2].orderBy()
			sel.Limit = yyDollar[3].limit()
			sel.Lock = yyDollar[4].str()
			yyLocal = sel
		}
		yyVAL.val = yyLocal
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.selStmt()
		{
			yyLocal = &Union{Type: yyDollar[2].str(), Left: yyDollar[1].selStmt(), Right: yyDollar[3].selStmt(), OrderBy: yyDollar[4].orderBy(), Limit: yyDollar[5].limit(), Lock: yyDollar[6].str()}
		}
		yyVAL.val = yyLocal
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.selStmt()
		{
			yyLocal = &Select{Comments: Comments(yyDollar[2].bytes2()), Cache: yyDollar[3].str(), SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr()}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName()}}}
		}
		yyVAL.val = yyLocal
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Stream{Comments: Comments(yyDollar[2].bytes2()), SelectExpr: yyDollar[3].selectExpr(), Table: yyDollar[5].tableName()}
		}
		yyVAL.val = yyLocal
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
		yyLocal := yyVAL.selStmt()
		{
			yyLocal = &Select{Comments: Comments(yyDollar[2].bytes2()), Cache: yyDollar[3].str(), Distinct: yyDollar[4].str(), Hints: yyDollar[5].str(), SelectExprs: yyDollar[6].selectExprs(), From: yyDollar[7].tableExprs(), Where: NewWhere(WhereStr, yyDollar[8].expr()), GroupBy: GroupBy(yyDollar[9].exprs()), Having: NewWhere(HavingStr, yyDollar[10].expr())}
		}
		yyVAL.val = yyLocal
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.selStmt()
		{
			yyLocal = yyDollar[1].selStmt()
		}
		yyVAL.val = yyLocal
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.selStmt()
		{
			yyLocal = &ParenSelect{Select: yyDollar[2].selStmt()}
		}
		yyVAL.val = yyLocal
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.selStmt()
		{
			yyLocal = yyDollar[1].selStmt()
		}
		yyVAL.val = yyLocal
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.selStmt()
		{
			yyLocal = &ParenSelect{Select: yyDollar[2].selStmt()}
		}
		yyVAL.val = yyLocal
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins()
			ins.Action = yyDollar[1].str()
			ins.Comments = yyDollar[2].bytes2()
			ins.Ignore = yyDollar[3].str()
			ins.Table = yyDollar[4].tableName()
			ins.Partitions = yyDollar[5].partitions()
			ins.OnDup = OnDup(yyDollar[7].updateExprs())
			yyLocal = ins
		}
		yyVAL.val = yyLocal
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs()))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs()))
			for _, updateList := range yyDollar[7].updateExprs() {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyLocal = &Insert{Action: yyDollar[1].str(), Comments: Comments(yyDollar[2].bytes2()), Ignore: yyDollar[3].str(), Table: yyDollar[4].tableName(), Partitions: yyDollar[5].partitions(), Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs())}
		}
		yyVAL.val = yyLocal
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = InsertStr
		}
		yyVAL.val = yyLocal
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ReplaceStr
		}
		yyVAL.val = yyLocal
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Update{Comments: Comments(yyDollar[2].bytes2()), TableExprs: yyDollar[3].tableExprs(), Exprs: yyDollar[5].updateExprs(), Where: NewWhere(WhereStr, yyDollar[6].expr()), OrderBy: yyDollar[7].orderBy(), Limit: yyDollar[8].limit()}
		}
		yyVAL.val = yyLocal
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Delete{Comments: Comments(yyDollar[2].bytes2()), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName()}}, Partitions: yyDollar[5].partitions(), Where: NewWhere(WhereStr, yyDollar[6].expr()), OrderBy: yyDollar[7].orderBy(), Limit: yyDollar[8].limit()}
		}
		yyVAL.val = yyLocal
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Delete{Comments: Comments(yyDollar[2].bytes2()), Targets: yyDollar[4].tableNames(), TableExprs: yyDollar[6].tableExprs(), Where: NewWhere(WhereStr, yyDollar[7].expr())}
		}
		yyVAL.val = yyLocal
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Delete{Comments: Comments(yyDollar[2].bytes2()), Targets: yyDollar[3].tableNames(), TableExprs: yyDollar[5].tableExprs(), Where: NewWhere(WhereStr, yyDollar[6].expr())}
		}
		yyVAL.val = yyLocal
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.tableNames()
		{
			yyLocal = TableNames{yyDollar[1].tableName()}
		}
		yyVAL.val = yyLocal
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.tableNames()
		{
			yyLocal = append(yyLocal, yyDollar[3].tableName())
		}
		yyVAL.val = yyLocal
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.partitions()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.partitions()
		{
			yyLocal = yyDollar[3].partitions()
		}
		yyVAL.val = yyLocal
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Set{Comments: Comments(yyDollar[2].bytes2()), Exprs: yyDollar[3].setExprs()}
		}
		yyVAL.val = yyLocal
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Set{Comments: Comments(yyDollar[2].bytes2()), Scope: yyDollar[3].str(), Exprs: yyDollar[4].setExprs()}
		}
		yyVAL.val = yyLocal
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Set{Comments: Comments(yyDollar[2].bytes2()), Scope: yyDollar[3].str(), Exprs: yyDollar[5].setExprs()}
		}
		yyVAL.val = yyLocal
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Set{Comments: Comments(yyDollar[2].bytes2()), Exprs: yyDollar[4].setExprs()}
		}
		yyVAL.val = yyLocal
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.setExprs()
		{
			yyLocal = SetExprs{yyDollar[1].setExpr()}
		}
		yyVAL.val = yyLocal
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.setExprs()
		{
			yyLocal = append(yyLocal, yyDollar[3].setExpr())
		}
		yyVAL.val = yyLocal
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.setExpr()
		{
			yyLocal = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str()))}
		}
		yyVAL.val = yyLocal
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.setExpr()
		{
			yyLocal = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
		yyVAL.val = yyLocal
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.setExpr()
		{
			yyLocal = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
		yyVAL.val = yyLocal
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = IsolationLevelRepeatableRead
		}
		yyVAL.val = yyLocal
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = IsolationLevelReadCommitted
		}
		yyVAL.val = yyLocal
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = IsolationLevelReadUncommitted
		}
		yyVAL.val = yyLocal
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = IsolationLevelSerializable
		}
		yyVAL.val = yyLocal
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = SessionStr
		}
		yyVAL.val = yyLocal
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = GlobalStr
		}
		yyVAL.val = yyLocal
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyDollar[1].ddl().TableSpec = yyDollar[2].TableSpec()
			yyLocal = yyDollar[1].ddl()
		}
		yyVAL.val = yyLocal
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			// Create table [name] like [name]
			yyDollar[1].ddl().OptLike = yyDollar[2].optLike()
			yyLocal = yyDollar[1].ddl()
		}
		yyVAL.val = yyLocal
	case 63:
		yyDollar = yyS[yypt-8 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			// Change this to an alter statement
			yyLocal = &DDL{Action: AlterStr, Table: yyDollar[7].tableName(), NewName: yyDollar[7].tableName()}
		}
		yyVAL.val = yyLocal
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName().ToViewName()}
		}
		yyVAL.val = yyLocal
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName().ToViewName()}
		}
		yyVAL.val = yyLocal
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent(),
				Type:   yyDollar[4].colIdent(),
				Params: yyDollar[5].vindexParams(),
			}}
		}
		yyVAL.val = yyLocal
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes())}
		}
		yyVAL.val = yyLocal
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes())}
		}
		yyVAL.val = yyLocal
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = NewColIdent("")
		}
		yyVAL.val = yyLocal
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = yyDollar[2].colIdent()
		}
		yyVAL.val = yyLocal
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = NewColIdent(string(yyDollar[1].bytes()))
		}
		yyVAL.val = yyLocal
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.vindexParams()
		{
			var v []VindexParam
			yyLocal = v
		}
		yyVAL.val = yyLocal
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.vindexParams()
		{
			yyLocal = yyDollar[2].vindexParams()
		}
		yyVAL.val = yyLocal
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.vindexParams()
		{
			yyLocal = make([]VindexParam, 0, 4)
			yyLocal = append(yyLocal, yyDollar[1].vindexParam())
		}
		yyVAL.val = yyLocal
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.vindexParams()
		{
			yyLocal = append(yyLocal, yyDollar[3].vindexParam())
		}
		yyVAL.val = yyLocal
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.vindexParam()
		{
			yyLocal = VindexParam{Key: yyDollar[1].colIdent(), Val: yyDollar[3].str()}
		}
		yyVAL.val = yyLocal
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.ddl()
		{
			yyLocal = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName()}
			setDDL(yylex, yyLocal)
		}
		yyVAL.val = yyLocal
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.TableSpec()
		{
			yyLocal = yyDollar[2].TableSpec()
			yyLocal.Options = yyDollar[4].str()
		}
		yyVAL.val = yyLocal
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.optLike()
		{
			yyLocal = &OptLike{LikeTable: yyDollar[2].tableName()}
		}
		yyVAL.val = yyLocal
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.optLike()
		{
			yyLocal = &OptLike{LikeTable: yyDollar[3].tableName()}
		}
		yyVAL.val = yyLocal
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.TableSpec()
		{
			yyLocal = &TableSpec{}
			yyLocal.AddColumn(yyDollar[1].columnDefinition())
		}
		yyVAL.val = yyLocal
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.TableSpec()
		{
			yyLocal.AddColumn(yyDollar[3].columnDefinition())
		}
		yyVAL.val = yyLocal
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.TableSpec()
		{
			yyLocal.AddIndex(yyDollar[3].indexDefinition())
		}
		yyVAL.val = yyLocal
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.TableSpec()
		{
			yyLocal.AddConstraint(yyDollar[3].constraintDefinition())
		}
		yyVAL.val = yyLocal
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
		yyLocal := yyVAL.columnDefinition()
		{
			v := yyDollar[2].columnType()
			v.NotNull = yyDollar[3].boolVal()
			v.Default = yyDollar[4].optVal()
			v.OnUpdate = yyDollar[5].optVal()
			v.Autoincrement = yyDollar[6].boolVal()
			v.KeyOpt = yyDollar[7].colKeyOpt()
			v.Comment = yyDollar[8].optVal()
			yyLocal = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes())), Type: v}
		}
		yyVAL.val = yyLocal
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = yyDollar[1].columnType()
			yyLocal.Unsigned = yyDollar[2].boolVal()
			yyLocal.Zerofill = yyDollar[3].boolVal()
		}
		yyVAL.val = yyLocal
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = yyDollar[1].columnType()
			yyLocal.Length = yyDollar[2].optVal()
		}
		yyVAL.val = yyLocal
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = yyDollar[1].columnType()
		}
		yyVAL.val = yyLocal
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
			yyLocal.Length = yyDollar[2].LengthScaleOption().Length
			yyLocal.Scale = yyDollar[2].LengthScaleOption().Scale
		}
		yyVAL.val = yyLocal
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
			yyLocal.Length = yyDollar[2].LengthScaleOption().Length
			yyLocal.Scale = yyDollar[2].LengthScaleOption().Scale
		}
		yyVAL.val = yyLocal
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
			yyLocal.Length = yyDollar[2].LengthScaleOption().Length
			yyLocal.Scale = yyDollar[2].LengthScaleOption().Scale
		}
		yyVAL.val = yyLocal
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
			yyLocal.Length = yyDollar[2].LengthScaleOption().Length
			yyLocal.Scale = yyDollar[2].LengthScaleOption().Scale
		}
		yyVAL.val = yyLocal
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
			yyLocal.Length = yyDollar[2].LengthScaleOption().Length
			yyLocal.Scale = yyDollar[2].LengthScaleOption().Scale
		}
		yyVAL.val = yyLocal
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal()}
		}
		yyVAL.val = yyLocal
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal()}
		}
		yyVAL.val = yyLocal
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal()}
		}
		yyVAL.val = yyLocal
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal(), Charset: yyDollar[3].str(), Collate: yyDollar[4].str()}
		}
		yyVAL.val = yyLocal
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal(), Charset: yyDollar[3].str(), Collate: yyDollar[4].str()}
		}
		yyVAL.val = yyLocal
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal()}
		}
		yyVAL.val = yyLocal
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal()}
		}
		yyVAL.val = yyLocal
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), Charset: yyDollar[2].str(), Collate: yyDollar[3].str()}
		}
		yyVAL.val = yyLocal
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), Charset: yyDollar[2].str(), Collate: yyDollar[3].str()}
		}
		yyVAL.val = yyLocal
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), Charset: yyDollar[2].str(), Collate: yyDollar[3].str()}
		}
		yyVAL.val = yyLocal
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), Charset: yyDollar[2].str(), Collate: yyDollar[3].str()}
		}
		yyVAL.val = yyLocal
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), EnumValues: yyDollar[3].strs(), Charset: yyDollar[5].str(), Collate: yyDollar[6].str()}
		}
		yyVAL.val = yyLocal
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes()), EnumValues: yyDollar[3].strs(), Charset: yyDollar[5].str(), Collate: yyDollar[6].str()}
		}
		yyVAL.val = yyLocal
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columnType()
		{
			yyLocal = ColumnType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.strs()
		{
			yyLocal = make([]string, 0, 4)
			yyLocal = append(yyLocal, "'"+string(yyDollar[1].bytes())+"'")
		}
		yyVAL.val = yyLocal
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.strs()
		{
			yyLocal = append(yyDollar[1].strs(), "'"+string(yyDollar[3].bytes())+"'")
		}
		yyVAL.val = yyLocal
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = NewIntVal(yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.LengthScaleOption()
		{
			yyLocal = LengthScaleOption{}
		}
		yyVAL.val = yyLocal
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.LengthScaleOption()
		{
			yyLocal = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes()),
				Scale:  NewIntVal(yyDollar[4].bytes()),
			}
		}
		yyVAL.val = yyLocal
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.LengthScaleOption()
		{
			yyLocal = LengthScaleOption{}
		}
		yyVAL.val = yyLocal
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.LengthScaleOption()
		{
			yyLocal = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes()),
			}
		}
		yyVAL.val = yyLocal
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.LengthScaleOption()
		{
			yyLocal = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes()),
				Scale:  NewIntVal(yyDollar[4].bytes()),
			}
		}
		yyVAL.val = yyLocal
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.boolVal()
		{
			yyLocal = BoolVal(false)
		}
		yyVAL.val = yyLocal
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.boolVal()
		{
			yyLocal = BoolVal(true)
		}
		yyVAL.val = yyLocal
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.boolVal()
		{
			yyLocal = BoolVal(false)
		}
		yyVAL.val = yyLocal
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.boolVal()
		{
			yyLocal = BoolVal(true)
		}
		yyVAL.val = yyLocal
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.boolVal()
		{
			yyLocal = BoolVal(false)
		}
		yyVAL.val = yyLocal
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.boolVal()
		{
			yyLocal = BoolVal(false)
		}
		yyVAL.val = yyLocal
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.boolVal()
		{
			yyLocal = BoolVal(true)
		}
		yyVAL.val = yyLocal
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = NewStrVal(yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = NewIntVal(yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = NewFloatVal(yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = NewValArg(yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = NewValArg(yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = NewBitVal(yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = NewValArg(yyDollar[3].bytes())
		}
		yyVAL.val = yyLocal
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.boolVal()
		{
			yyLocal = BoolVal(false)
		}
		yyVAL.val = yyLocal
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.boolVal()
		{
			yyLocal = BoolVal(true)
		}
		yyVAL.val = yyLocal
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[3].bytes())
		}
		yyVAL.val = yyLocal
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[3].bytes())
		}
		yyVAL.val = yyLocal
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.colKeyOpt()
		{
			yyLocal = colKeyNone
		}
		yyVAL.val = yyLocal
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.colKeyOpt()
		{
			yyLocal = colKeyPrimary
		}
		yyVAL.val = yyLocal
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colKeyOpt()
		{
			yyLocal = colKey
		}
		yyVAL.val = yyLocal
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.colKeyOpt()
		{
			yyLocal = colKeyUniqueKey
		}
		yyVAL.val = yyLocal
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colKeyOpt()
		{
			yyLocal = colKeyUnique
		}
		yyVAL.val = yyLocal
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.optVal()
		{
			yyLocal = NewStrVal(yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.indexDefinition()
		{
			yyLocal = &IndexDefinition{Info: yyDollar[1].indexInfo(), Columns: yyDollar[3].indexColumns(), Options: yyDollar[5].indexOptions()}
		}
		yyVAL.val = yyLocal
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.indexDefinition()
		{
			yyLocal = &IndexDefinition{Info: yyDollar[1].indexInfo(), Columns: yyDollar[3].indexColumns()}
		}
		yyVAL.val = yyLocal
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.indexOptions()
		{
			yyLocal = []*IndexOption{yyDollar[1].indexOption()}
		}
		yyVAL.val = yyLocal
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.indexOptions()
		{
			yyLocal = append(yyLocal, yyDollar[2].indexOption())
		}
		yyVAL.val = yyLocal
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.indexOption()
		{
			yyLocal = &IndexOption{Name: string(yyDollar[1].bytes()), Using: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.indexOption()
		{
			// should not be string
			yyLocal = &IndexOption{Name: string(yyDollar[1].bytes()), Value: NewIntVal(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.indexOption()
		{
			yyLocal = &IndexOption{Name: string(yyDollar[1].bytes()), Value: NewStrVal(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.indexInfo()
		{
			yyLocal = &IndexInfo{Type: string(yyDollar[1].bytes()) + " " + string(yyDollar[2].bytes()), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
		yyVAL.val = yyLocal
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.indexInfo()
		{
			yyLocal = &IndexInfo{Type: string(yyDollar[1].bytes()) + " " + string(yyDollar[2].str()), Name: NewColIdent(string(yyDollar[3].bytes())), Spatial: true, Unique: false}
		}
		yyVAL.val = yyLocal
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.indexInfo()
		{
			yyLocal = &IndexInfo{Type: string(yyDollar[1].bytes()) + " " + string(yyDollar[2].str()), Name: NewColIdent(string(yyDollar[3].bytes())), Unique: true}
		}
		yyVAL.val = yyLocal
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.indexInfo()
		{
			yyLocal = &IndexInfo{Type: string(yyDollar[1].bytes()), Name: NewColIdent(string(yyDollar[2].bytes())), Unique: true}
		}
		yyVAL.val = yyLocal
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.indexInfo()
		{
			yyLocal = &IndexInfo{Type: string(yyDollar[1].str()), Name: NewColIdent(string(yyDollar[2].bytes())), Unique: false}
		}
		yyVAL.val = yyLocal
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.indexColumns()
		{
			yyLocal = []*IndexColumn{yyDollar[1].indexColumn()}
		}
		yyVAL.val = yyLocal
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.indexColumns()
		{
			yyLocal = append(yyLocal, yyDollar[3].indexColumn())
		}
		yyVAL.val = yyLocal
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.indexColumn()
		{
			yyLocal = &IndexColumn{Column: yyDollar[1].colIdent(), Length: yyDollar[2].optVal()}
		}
		yyVAL.val = yyLocal
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.constraintDefinition()
		{
			yyLocal = &ConstraintDefinition{Name: string(yyDollar[2].bytes()), Details: yyDollar[3].constraintInfo()}
		}
		yyVAL.val = yyLocal
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.constraintDefinition()
		{
			yyLocal = &ConstraintDefinition{Details: yyDollar[1].constraintInfo()}
		}
		yyVAL.val = yyLocal
	case 193:
		yyDollar = yyS[yypt-10 : yypt+1]
		yyLocal := yyVAL.constraintInfo()
		{
			yyLocal = &ForeignKeyDefinition{Source: yyDollar[4].columns(), ReferencedTable: yyDollar[7].tableName(), ReferencedColumns: yyDollar[9].columns()}
		}
		yyVAL.val = yyLocal
	case 194:
		yyDollar = yyS[yypt-11 : yypt+1]
		yyLocal := yyVAL.constraintInfo()
		{
			yyLocal = &ForeignKeyDefinition{Source: yyDollar[4].columns(), ReferencedTable: yyDollar[7].tableName(), ReferencedColumns: yyDollar[9].columns(), OnDelete: yyDollar[11].ReferenceAction()}
		}
		yyVAL.val = yyLocal
	case 195:
		yyDollar = yyS[yypt-11 : yypt+1]
		yyLocal := yyVAL.constraintInfo()
		{
			yyLocal = &ForeignKeyDefinition{Source: yyDollar[4].columns(), ReferencedTable: yyDollar[7].tableName(), ReferencedColumns: yyDollar[9].columns(), OnUpdate: yyDollar[11].ReferenceAction()}
		}
		yyVAL.val = yyLocal
	case 196:
		yyDollar = yyS[yypt-12 : yypt+1]
		yyLocal := yyVAL.constraintInfo()
		{
			yyLocal = &ForeignKeyDefinition{Source: yyDollar[4].columns(), ReferencedTable: yyDollar[7].tableName(), ReferencedColumns: yyDollar[9].columns(), OnDelete: yyDollar[11].ReferenceAction(), OnUpdate: yyDollar[12].ReferenceAction()}
		}
		yyVAL.val = yyLocal
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.ReferenceAction()
		{
			yyLocal = yyDollar[3].ReferenceAction()
		}
		yyVAL.val = yyLocal
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.ReferenceAction()
		{
			yyLocal = yyDollar[3].ReferenceAction()
		}
		yyVAL.val = yyLocal
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.ReferenceAction()
		{
			yyLocal = Restrict
		}
		yyVAL.val = yyLocal
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.ReferenceAction()
		{
			yyLocal = Cascade
		}
		yyVAL.val = yyLocal
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.ReferenceAction()
		{
			yyLocal = NoAction
		}
		yyVAL.val = yyLocal
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.ReferenceAction()
		{
			yyLocal = SetDefault
		}
		yyVAL.val = yyLocal
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.ReferenceAction()
		{
			yyLocal = SetNull
		}
		yyVAL.val = yyLocal
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = " " + string(yyDollar[1].str())
		}
		yyVAL.val = yyLocal
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[1].str()) + ", " + string(yyDollar[3].str())
		}
		yyVAL.val = yyLocal
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = yyDollar[1].str()
		}
		yyVAL.val = yyLocal
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = yyDollar[1].str() + " " + yyDollar[2].str()
		}
		yyVAL.val = yyLocal
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = yyDollar[1].str() + "=" + yyDollar[3].str()
		}
		yyVAL.val = yyLocal
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = yyDollar[1].colIdent().String()
		}
		yyVAL.val = yyLocal
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = "'" + string(yyDollar[1].bytes()) + "'"
		}
		yyVAL.val = yyLocal
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: AlterStr, Table: yyDollar[4].tableName(), NewName: yyDollar[4].tableName()}
		}
		yyVAL.val = yyLocal
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: AlterStr, Table: yyDollar[4].tableName(), NewName: yyDollar[4].tableName()}
		}
		yyVAL.val = yyLocal
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: AlterStr, Table: yyDollar[4].tableName(), NewName: yyDollar[4].tableName()}
		}
		yyVAL.val = yyLocal
	case 216:
		yyDollar = yyS[yypt-12 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName(),
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent(),
					Type:   yyDollar[11].colIdent(),
					Params: yyDollar[12].vindexParams(),
				},
				VindexCols: yyDollar[9].columns(),
			}
		}
		yyVAL.val = yyLocal
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName(),
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent(),
				},
			}
		}
		yyVAL.val = yyLocal
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			// Change this to a rename statement
			yyLocal = &DDL{Action: RenameStr, Table: yyDollar[4].tableName(), NewName: yyDollar[7].tableName()}
		}
		yyVAL.val = yyLocal
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			// Rename an index can just be an alter
			yyLocal = &DDL{Action: AlterStr, Table: yyDollar[4].tableName(), NewName: yyDollar[4].tableName()}
		}
		yyVAL.val = yyLocal
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: AlterStr, Table: yyDollar[3].tableName().ToViewName(), NewName: yyDollar[3].tableName().ToViewName()}
		}
		yyVAL.val = yyLocal
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: AlterStr, Table: yyDollar[4].tableName(), PartitionSpec: yyDollar[5].partSpec()}
		}
		yyVAL.val = yyLocal
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.partSpec()
		{
			yyLocal = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent(), Definitions: yyDollar[6].partDefs()}
		}
		yyVAL.val = yyLocal
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.partDefs()
		{
			yyLocal = []*PartitionDefinition{yyDollar[1].partDef()}
		}
		yyVAL.val = yyLocal
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.partDefs()
		{
			yyLocal = append(yyDollar[1].partDefs(), yyDollar[3].partDef())
		}
		yyVAL.val = yyLocal
	case 236:
		yyDollar = yyS[yypt-8 : yypt+1]
		yyLocal := yyVAL.partDef()
		{
			yyLocal = &PartitionDefinition{Name: yyDollar[2].colIdent(), Limit: yyDollar[7].expr()}
		}
		yyVAL.val = yyLocal
	case 237:
		yyDollar = yyS[yypt-8 : yypt+1]
		yyLocal := yyVAL.partDef()
		{
			yyLocal = &PartitionDefinition{Name: yyDollar[2].colIdent(), Maxvalue: true}
		}
		yyVAL.val = yyLocal
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: RenameStr, Table: yyDollar[3].tableName(), NewName: yyDollar[5].tableName()}
		}
		yyVAL.val = yyLocal
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			var exists bool
			if yyDollar[3].byt() != 0 {
				exists = true
			}
			yyLocal = &DDL{Action: DropStr, Table: yyDollar[4].tableName(), IfExists: exists}
		}
		yyVAL.val = yyLocal
	case 240:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			// Change this to an alter statement
			yyLocal = &DDL{Action: AlterStr, Table: yyDollar[5].tableName(), NewName: yyDollar[5].tableName()}
		}
		yyVAL.val = yyLocal
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			var exists bool
			if yyDollar[3].byt() != 0 {
				exists = true
			}
			yyLocal = &DDL{Action: DropStr, Table: yyDollar[4].tableName().ToViewName(), IfExists: exists}
		}
		yyVAL.val = yyLocal
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes())}
		}
		yyVAL.val = yyLocal
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes())}
		}
		yyVAL.val = yyLocal
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName()}
		}
		yyVAL.val = yyLocal
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName()}
		}
		yyVAL.val = yyLocal
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &DDL{Action: AlterStr, Table: yyDollar[3].tableName(), NewName: yyDollar[3].tableName()}
		}
		yyVAL.val = yyLocal
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes()) + " " + string(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes()) + " " + string(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes()) + " " + string(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes()) + " " + string(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes()) + " " + string(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes()) + " " + string(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes()) + " " + string(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes()) + " " + string(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Scope: yyDollar[2].str(), Type: string(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str(), DbName: yyDollar[6].str(), Filter: yyDollar[7].showFilter()}
			yyLocal = &Show{Type: string(yyDollar[3].bytes()), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName()}
		}
		yyVAL.val = yyLocal
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str() == "processlist" {
				yyLocal = &Show{Type: yyDollar[3].str()}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str(), DbName: yyDollar[4].str(), Filter: yyDollar[5].showFilter()}
				yyLocal = &Show{Type: yyDollar[3].str(), ShowTablesOpt: showTablesOpt}
			}
		}
		yyVAL.val = yyLocal
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Scope: yyDollar[2].str(), Type: string(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			v := yyDollar[4].expr()
			yyLocal = &Show{Type: string(yyDollar[2].bytes()), ShowCollationFilterOpt: &v}
		}
		yyVAL.val = yyLocal
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes()), OnTable: yyDollar[4].tableName()}
		}
		yyVAL.val = yyLocal
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Show{Type: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = "full "
		}
		yyVAL.val = yyLocal
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = yyDollar[2].tableIdent().v
		}
		yyVAL.val = yyLocal
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = yyDollar[2].tableIdent().v
		}
		yyVAL.val = yyLocal
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.showFilter()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.showFilter()
		{
			yyLocal = &ShowFilter{Like: string(yyDollar[2].bytes())}
		}
		yyVAL.val = yyLocal
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.showFilter()
		{
			yyLocal = &ShowFilter{Filter: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = SessionStr
		}
		yyVAL.val = yyLocal
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = GlobalStr
		}
		yyVAL.val = yyLocal
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Use{DBName: yyDollar[2].tableIdent()}
		}
		yyVAL.val = yyLocal
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Use{DBName: TableIdent{v: ""}}
		}
		yyVAL.val = yyLocal
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Begin{}
		}
		yyVAL.val = yyLocal
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Begin{}
		}
		yyVAL.val = yyLocal
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Commit{}
		}
		yyVAL.val = yyLocal
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &Rollback{}
		}
		yyVAL.val = yyLocal
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &OtherRead{}
		}
		yyVAL.val = yyLocal
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &OtherRead{}
		}
		yyVAL.val = yyLocal
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &OtherRead{}
		}
		yyVAL.val = yyLocal
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &OtherAdmin{}
		}
		yyVAL.val = yyLocal
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &OtherAdmin{}
		}
		yyVAL.val = yyLocal
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &OtherAdmin{}
		}
		yyVAL.val = yyLocal
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.statement()
		{
			yyLocal = &OtherAdmin{}
		}
		yyVAL.val = yyLocal
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.bytes2()
		{
			setAllowComments(yylex, true)
		}
		yyVAL.val = yyLocal
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.bytes2()
		{
			yyLocal = yyDollar[2].bytes2()
			setAllowComments(yylex, false)
		}
		yyVAL.val = yyLocal
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.bytes2()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.bytes2()
		{
			yyLocal = append(yyDollar[1].bytes2(), yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = UnionStr
		}
		yyVAL.val = yyLocal
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = UnionAllStr
		}
		yyVAL.val = yyLocal
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = UnionDistinctStr
		}
		yyVAL.val = yyLocal
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = SQLNoCacheStr
		}
		yyVAL.val = yyLocal
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = SQLCacheStr
		}
		yyVAL.val = yyLocal
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = DistinctStr
		}
		yyVAL.val = yyLocal
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = StraightJoinHint
		}
		yyVAL.val = yyLocal
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.selectExprs()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.selectExprs()
		{
			yyLocal = yyDollar[1].selectExprs()
		}
		yyVAL.val = yyLocal
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.selectExprs()
		{
			yyLocal = SelectExprs{yyDollar[1].selectExpr()}
		}
		yyVAL.val = yyLocal
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.selectExprs()
		{
			yyLocal = append(yyLocal, yyDollar[3].selectExpr())
		}
		yyVAL.val = yyLocal
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.selectExpr()
		{
			yyLocal = &StarExpr{}
		}
		yyVAL.val = yyLocal
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.selectExpr()
		{
			yyLocal = &AliasedExpr{Expr: yyDollar[1].expr(), As: yyDollar[2].colIdent()}
		}
		yyVAL.val = yyLocal
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.selectExpr()
		{
			yyLocal = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent()}}
		}
		yyVAL.val = yyLocal
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.selectExpr()
		{
			yyLocal = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent(), Name: yyDollar[3].tableIdent()}}
		}
		yyVAL.val = yyLocal
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = ColIdent{}
		}
		yyVAL.val = yyLocal
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = yyDollar[1].colIdent()
		}
		yyVAL.val = yyLocal
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = yyDollar[2].colIdent()
		}
		yyVAL.val = yyLocal
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = NewColIdent(string(yyDollar[1].bytes()))
		}
		yyVAL.val = yyLocal
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.tableExprs()
		{
			yyLocal = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
		yyVAL.val = yyLocal
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.tableExprs()
		{
			yyLocal = yyDollar[2].tableExprs()
		}
		yyVAL.val = yyLocal
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.tableExprs()
		{
			yyLocal = TableExprs{yyDollar[1].tableExpr()}
		}
		yyVAL.val = yyLocal
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.tableExprs()
		{
			yyLocal = append(yyLocal, yyDollar[3].tableExpr())
		}
		yyVAL.val = yyLocal
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.tableExpr()
		{
			yyLocal = yyDollar[1].aliasedTableName()
		}
		yyVAL.val = yyLocal
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.tableExpr()
		{
			yyLocal = &AliasedTableExpr{Expr: yyDollar[1].subquery(), As: yyDollar[3].tableIdent()}
		}
		yyVAL.val = yyLocal
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.tableExpr()
		{
			yyLocal = &ParenTableExpr{Exprs: yyDollar[2].tableExprs()}
		}
		yyVAL.val = yyLocal
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.aliasedTableName()
		{
			yyLocal = &AliasedTableExpr{Expr: yyDollar[1].tableName(), As: yyDollar[2].tableIdent(), Hints: yyDollar[3].indexHints()}
		}
		yyVAL.val = yyLocal
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.aliasedTableName()
		{
			yyLocal = &AliasedTableExpr{Expr: yyDollar[1].tableName(), Partitions: yyDollar[4].partitions(), As: yyDollar[6].tableIdent(), Hints: yyDollar[7].indexHints()}
		}
		yyVAL.val = yyLocal
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columns()
		{
			yyLocal = Columns{yyDollar[1].colIdent()}
		}
		yyVAL.val = yyLocal
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.columns()
		{
			yyLocal = append(yyLocal, yyDollar[3].colIdent())
		}
		yyVAL.val = yyLocal
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.partitions()
		{
			yyLocal = Partitions{yyDollar[1].colIdent()}
		}
		yyVAL.val = yyLocal
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.partitions()
		{
			yyLocal = append(yyLocal, yyDollar[3].colIdent())
		}
		yyVAL.val = yyLocal
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.tableExpr()
		{
			yyLocal = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr(), Join: yyDollar[2].str(), RightExpr: yyDollar[3].tableExpr(), Condition: yyDollar[4].joinCondition()}
		}
		yyVAL.val = yyLocal
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.tableExpr()
		{
			yyLocal = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr(), Join: yyDollar[2].str(), RightExpr: yyDollar[3].tableExpr(), Condition: yyDollar[4].joinCondition()}
		}
		yyVAL.val = yyLocal
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.tableExpr()
		{
			yyLocal = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr(), Join: yyDollar[2].str(), RightExpr: yyDollar[3].tableExpr(), Condition: yyDollar[4].joinCondition()}
		}
		yyVAL.val = yyLocal
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.tableExpr()
		{
			yyLocal = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr(), Join: yyDollar[2].str(), RightExpr: yyDollar[3].tableExpr()}
		}
		yyVAL.val = yyLocal
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.joinCondition()
		{
			yyLocal = JoinCondition{On: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.joinCondition()
		{
			yyLocal = JoinCondition{Using: yyDollar[3].columns()}
		}
		yyVAL.val = yyLocal
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.joinCondition()
		{
			yyLocal = JoinCondition{}
		}
		yyVAL.val = yyLocal
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.joinCondition()
		{
			yyLocal = yyDollar[1].joinCondition()
		}
		yyVAL.val = yyLocal
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.joinCondition()
		{
			yyLocal = JoinCondition{}
		}
		yyVAL.val = yyLocal
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.joinCondition()
		{
			yyLocal = JoinCondition{On: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.tableIdent()
		{
			yyLocal = NewTableIdent("")
		}
		yyVAL.val = yyLocal
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.tableIdent()
		{
			yyLocal = yyDollar[1].tableIdent()
		}
		yyVAL.val = yyLocal
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.tableIdent()
		{
			yyLocal = yyDollar[2].tableIdent()
		}
		yyVAL.val = yyLocal
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.tableIdent()
		{
			yyLocal = NewTableIdent(string(yyDollar[1].bytes()))
		}
		yyVAL.val = yyLocal
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = JoinStr
		}
		yyVAL.val = yyLocal
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = JoinStr
		}
		yyVAL.val = yyLocal
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = JoinStr
		}
		yyVAL.val = yyLocal
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = StraightJoinStr
		}
		yyVAL.val = yyLocal
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = LeftJoinStr
		}
		yyVAL.val = yyLocal
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = LeftJoinStr
		}
		yyVAL.val = yyLocal
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = RightJoinStr
		}
		yyVAL.val = yyLocal
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = RightJoinStr
		}
		yyVAL.val = yyLocal
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = NaturalJoinStr
		}
		yyVAL.val = yyLocal
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			if yyDollar[2].str() == LeftJoinStr {
				yyLocal = NaturalLeftJoinStr
			} else {
				yyLocal = NaturalRightJoinStr
			}
		}
		yyVAL.val = yyLocal
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.tableName()
		{
			yyLocal = yyDollar[2].tableName()
		}
		yyVAL.val = yyLocal
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.tableName()
		{
			yyLocal = yyDollar[1].tableName()
		}
		yyVAL.val = yyLocal
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.tableName()
		{
			yyLocal = TableName{Name: yyDollar[1].tableIdent()}
		}
		yyVAL.val = yyLocal
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.tableName()
		{
			yyLocal = TableName{Qualifier: yyDollar[1].tableIdent(), Name: yyDollar[3].tableIdent()}
		}
		yyVAL.val = yyLocal
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.indexHints()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.indexHints()
		{
			yyLocal = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns()}
		}
		yyVAL.val = yyLocal
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.indexHints()
		{
			yyLocal = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns()}
		}
		yyVAL.val = yyLocal
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.indexHints()
		{
			yyLocal = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns()}
		}
		yyVAL.val = yyLocal
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[2].expr()
		}
		yyVAL.val = yyLocal
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[1].expr()
		}
		yyVAL.val = yyLocal
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &AndExpr{Left: yyDollar[1].expr(), Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &OrExpr{Left: yyDollar[1].expr(), Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &NotExpr{Expr: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &IsExpr{Operator: yyDollar[3].str(), Expr: yyDollar[1].expr()}
		}
		yyVAL.val = yyLocal
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[1].expr()
		}
		yyVAL.val = yyLocal
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &Default{ColName: yyDollar[2].str()}
		}
		yyVAL.val = yyLocal
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[2].bytes())
		}
		yyVAL.val = yyLocal
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.boolVal()
		{
			yyLocal = BoolVal(true)
		}
		yyVAL.val = yyLocal
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.boolVal()
		{
			yyLocal = BoolVal(false)
		}
		yyVAL.val = yyLocal
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ComparisonExpr{Left: yyDollar[1].expr(), Operator: yyDollar[2].str(), Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ComparisonExpr{Left: yyDollar[1].expr(), Operator: InStr, Right: yyDollar[3].colTuple()}
		}
		yyVAL.val = yyLocal
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ComparisonExpr{Left: yyDollar[1].expr(), Operator: NotInStr, Right: yyDollar[4].colTuple()}
		}
		yyVAL.val = yyLocal
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ComparisonExpr{Left: yyDollar[1].expr(), Operator: LikeStr, Right: yyDollar[3].expr(), Escape: yyDollar[4].expr()}
		}
		yyVAL.val = yyLocal
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ComparisonExpr{Left: yyDollar[1].expr(), Operator: NotLikeStr, Right: yyDollar[4].expr(), Escape: yyDollar[5].expr()}
		}
		yyVAL.val = yyLocal
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ComparisonExpr{Left: yyDollar[1].expr(), Operator: RegexpStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ComparisonExpr{Left: yyDollar[1].expr(), Operator: NotRegexpStr, Right: yyDollar[4].expr()}
		}
		yyVAL.val = yyLocal
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &RangeCond{Left: yyDollar[1].expr(), Operator: BetweenStr, From: yyDollar[3].expr(), To: yyDollar[5].expr()}
		}
		yyVAL.val = yyLocal
	case 398:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &RangeCond{Left: yyDollar[1].expr(), Operator: NotBetweenStr, From: yyDollar[4].expr(), To: yyDollar[6].expr()}
		}
		yyVAL.val = yyLocal
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ExistsExpr{Subquery: yyDollar[2].subquery()}
		}
		yyVAL.val = yyLocal
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = IsNullStr
		}
		yyVAL.val = yyLocal
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = IsNotNullStr
		}
		yyVAL.val = yyLocal
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = IsTrueStr
		}
		yyVAL.val = yyLocal
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = IsNotTrueStr
		}
		yyVAL.val = yyLocal
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = IsFalseStr
		}
		yyVAL.val = yyLocal
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = IsNotFalseStr
		}
		yyVAL.val = yyLocal
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = EqualStr
		}
		yyVAL.val = yyLocal
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = LessThanStr
		}
		yyVAL.val = yyLocal
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = GreaterThanStr
		}
		yyVAL.val = yyLocal
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = LessEqualStr
		}
		yyVAL.val = yyLocal
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = GreaterEqualStr
		}
		yyVAL.val = yyLocal
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = NotEqualStr
		}
		yyVAL.val = yyLocal
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = NullSafeEqualStr
		}
		yyVAL.val = yyLocal
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[2].expr()
		}
		yyVAL.val = yyLocal
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colTuple()
		{
			yyLocal = yyDollar[1].valTuple()
		}
		yyVAL.val = yyLocal
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colTuple()
		{
			yyLocal = yyDollar[1].subquery()
		}
		yyVAL.val = yyLocal
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colTuple()
		{
			yyLocal = ListArg(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.subquery()
		{
			yyLocal = &Subquery{yyDollar[2].selStmt()}
		}
		yyVAL.val = yyLocal
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.exprs()
		{
			yyLocal = Exprs{yyDollar[1].expr()}
		}
		yyVAL.val = yyLocal
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.exprs()
		{
			yyLocal = append(yyDollar[1].exprs(), yyDollar[3].expr())
		}
		yyVAL.val = yyLocal
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[1].expr()
		}
		yyVAL.val = yyLocal
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[1].boolVal()
		}
		yyVAL.val = yyLocal
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[1].colName()
		}
		yyVAL.val = yyLocal
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[1].expr()
		}
		yyVAL.val = yyLocal
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[1].subquery()
		}
		yyVAL.val = yyLocal
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: BitAndStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: BitOrStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: BitXorStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: PlusStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: MinusStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: MultStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: DivStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: IntDivStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: ModStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: ModStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: ShiftLeftStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].expr(), Operator: ShiftRightStr, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].colName(), Operator: JSONExtractOp, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &BinaryExpr{Left: yyDollar[1].colName(), Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &CollateExpr{Expr: yyDollar[1].expr(), Charset: yyDollar[3].str()}
		}
		yyVAL.val = yyLocal
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			if num, ok := yyDollar[2].expr().(*SQLVal); ok && num.Type == IntVal {
				yyLocal = num
			} else {
				yyLocal = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr()}
			}
		}
		yyVAL.val = yyLocal
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			if num, ok := yyDollar[2].expr().(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyLocal = num
				} else {
					yyLocal = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyLocal = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr()}
			}
		}
		yyVAL.val = yyLocal
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyLocal = &IntervalExpr{Expr: yyDollar[2].expr(), Unit: yyDollar[3].colIdent().String()}
		}
		yyVAL.val = yyLocal
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: yyDollar[1].colIdent(), Exprs: yyDollar[3].selectExprs()}
		}
		yyVAL.val = yyLocal
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: yyDollar[1].colIdent(), Distinct: true, Exprs: yyDollar[4].selectExprs()}
		}
		yyVAL.val = yyLocal
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Qualifier: yyDollar[1].tableIdent(), Name: yyDollar[3].colIdent(), Exprs: yyDollar[5].selectExprs()}
		}
		yyVAL.val = yyLocal
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs()}
		}
		yyVAL.val = yyLocal
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs()}
		}
		yyVAL.val = yyLocal
	case 458:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ConvertExpr{Expr: yyDollar[3].expr(), Type: yyDollar[5].convertType()}
		}
		yyVAL.val = yyLocal
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ConvertExpr{Expr: yyDollar[3].expr(), Type: yyDollar[5].convertType()}
		}
		yyVAL.val = yyLocal
	case 460:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ConvertUsingExpr{Expr: yyDollar[3].expr(), Type: yyDollar[5].str()}
		}
		yyVAL.val = yyLocal
	case 461:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &SubstrExpr{Name: yyDollar[3].colName(), From: yyDollar[5].expr(), To: nil}
		}
		yyVAL.val = yyLocal
	case 462:
		yyDollar = yyS[yypt-8 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &SubstrExpr{Name: yyDollar[3].colName(), From: yyDollar[5].expr(), To: yyDollar[7].expr()}
		}
		yyVAL.val = yyLocal
	case 463:
		yyDollar = yyS[yypt-8 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &SubstrExpr{Name: yyDollar[3].colName(), From: yyDollar[5].expr(), To: yyDollar[7].expr()}
		}
		yyVAL.val = yyLocal
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &SubstrExpr{Name: yyDollar[3].colName(), From: yyDollar[5].expr(), To: nil}
		}
		yyVAL.val = yyLocal
	case 465:
		yyDollar = yyS[yypt-8 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &SubstrExpr{Name: yyDollar[3].colName(), From: yyDollar[5].expr(), To: yyDollar[7].expr()}
		}
		yyVAL.val = yyLocal
	case 466:
		yyDollar = yyS[yypt-8 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &SubstrExpr{Name: yyDollar[3].colName(), From: yyDollar[5].expr(), To: yyDollar[7].expr()}
		}
		yyVAL.val = yyLocal
	case 467:
		yyDollar = yyS[yypt-9 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &MatchExpr{Columns: yyDollar[3].selectExprs(), Expr: yyDollar[7].expr(), Option: yyDollar[8].str()}
		}
		yyVAL.val = yyLocal
	case 468:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &GroupConcatExpr{Distinct: yyDollar[3].str(), Exprs: yyDollar[4].selectExprs(), OrderBy: yyDollar[5].orderBy(), Separator: yyDollar[6].str()}
		}
		yyVAL.val = yyLocal
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &CaseExpr{Expr: yyDollar[2].expr(), Whens: yyDollar[3].whens(), Else: yyDollar[4].expr()}
		}
		yyVAL.val = yyLocal
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &ValuesFuncExpr{Name: yyDollar[3].colName()}
		}
		yyVAL.val = yyLocal
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
		yyVAL.val = yyLocal
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
		yyVAL.val = yyLocal
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("utc_time")}
		}
		yyVAL.val = yyLocal
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("utc_date")}
		}
		yyVAL.val = yyLocal
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("localtime")}
		}
		yyVAL.val = yyLocal
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
		yyVAL.val = yyLocal
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("current_date")}
		}
		yyVAL.val = yyLocal
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("current_time")}
		}
		yyVAL.val = yyLocal
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs()}
		}
		yyVAL.val = yyLocal
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs()}
		}
		yyVAL.val = yyLocal
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs()}
		}
		yyVAL.val = yyLocal
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs()}
		}
		yyVAL.val = yyLocal
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = BooleanModeStr
		}
		yyVAL.val = yyLocal
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = NaturalLanguageModeStr
		}
		yyVAL.val = yyLocal
	case 488:
		yyDollar = yyS[yypt-7 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = NaturalLanguageModeWithQueryExpansionStr
		}
		yyVAL.val = yyLocal
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = QueryExpansionStr
		}
		yyVAL.val = yyLocal
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal()}
		}
		yyVAL.val = yyLocal
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal(), Charset: yyDollar[3].str(), Operator: CharacterSetStr}
		}
		yyVAL.val = yyLocal
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal(), Charset: string(yyDollar[3].bytes())}
		}
		yyVAL.val = yyLocal
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal()}
		}
		yyVAL.val = yyLocal
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes())}
			yyLocal.Length = yyDollar[2].LengthScaleOption().Length
			yyLocal.Scale = yyDollar[2].LengthScaleOption().Scale
		}
		yyVAL.val = yyLocal
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal()}
		}
		yyVAL.val = yyLocal
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes()), Length: yyDollar[2].optVal()}
		}
		yyVAL.val = yyLocal
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.convertType()
		{
			yyLocal = &ConvertType{Type: string(yyDollar[1].bytes())}
		}
		yyVAL.val = yyLocal
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[1].expr()
		}
		yyVAL.val = yyLocal
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = string("")
		}
		yyVAL.val = yyLocal
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = " separator '" + string(yyDollar[2].bytes()) + "'"
		}
		yyVAL.val = yyLocal
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.whens()
		{
			yyLocal = []*When{yyDollar[1].when()}
		}
		yyVAL.val = yyLocal
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.whens()
		{
			yyLocal = append(yyDollar[1].whens(), yyDollar[2].when())
		}
		yyVAL.val = yyLocal
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.when()
		{
			yyLocal = &When{Cond: yyDollar[2].expr(), Val: yyDollar[4].expr()}
		}
		yyVAL.val = yyLocal
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[2].expr()
		}
		yyVAL.val = yyLocal
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colName()
		{
			yyLocal = &ColName{Name: yyDollar[1].colIdent()}
		}
		yyVAL.val = yyLocal
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.colName()
		{
			yyLocal = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent()}, Name: yyDollar[3].colIdent()}
		}
		yyVAL.val = yyLocal
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.colName()
		{
			yyLocal = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent(), Name: yyDollar[3].tableIdent()}, Name: yyDollar[5].colIdent()}
		}
		yyVAL.val = yyLocal
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = NewStrVal(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = NewHexVal(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = NewBitVal(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = NewIntVal(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = NewFloatVal(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = NewHexNum(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = NewValArg(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &NullVal{}
		}
		yyVAL.val = yyLocal
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent().Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyLocal = NewIntVal([]byte("1"))
		}
		yyVAL.val = yyLocal
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = NewIntVal(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = NewValArg(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.exprs()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.exprs()
		{
			yyLocal = yyDollar[3].exprs()
		}
		yyVAL.val = yyLocal
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = yyDollar[2].expr()
		}
		yyVAL.val = yyLocal
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.orderBy()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.orderBy()
		{
			yyLocal = yyDollar[3].orderBy()
		}
		yyVAL.val = yyLocal
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.orderBy()
		{
			yyLocal = OrderBy{yyDollar[1].order()}
		}
		yyVAL.val = yyLocal
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.orderBy()
		{
			yyLocal = append(yyDollar[1].orderBy(), yyDollar[3].order())
		}
		yyVAL.val = yyLocal
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.order()
		{
			yyLocal = &Order{Expr: yyDollar[1].expr(), Direction: yyDollar[2].str()}
		}
		yyVAL.val = yyLocal
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = AscScr
		}
		yyVAL.val = yyLocal
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = AscScr
		}
		yyVAL.val = yyLocal
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = DescScr
		}
		yyVAL.val = yyLocal
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.limit()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.limit()
		{
			yyLocal = &Limit{Rowcount: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.limit()
		{
			yyLocal = &Limit{Offset: yyDollar[2].expr(), Rowcount: yyDollar[4].expr()}
		}
		yyVAL.val = yyLocal
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.limit()
		{
			yyLocal = &Limit{Offset: yyDollar[4].expr(), Rowcount: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ForUpdateStr
		}
		yyVAL.val = yyLocal
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ShareModeStr
		}
		yyVAL.val = yyLocal
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.ins()
		{
			yyLocal = &Insert{Rows: yyDollar[2].values()}
		}
		yyVAL.val = yyLocal
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.ins()
		{
			yyLocal = &Insert{Rows: yyDollar[1].selStmt()}
		}
		yyVAL.val = yyLocal
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.ins()
		{
			// Drop the redundant parenthesis.
			yyLocal = &Insert{Rows: yyDollar[2].selStmt()}
		}
		yyVAL.val = yyLocal
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.ins()
		{
			yyLocal = &Insert{Columns: yyDollar[2].columns(), Rows: yyDollar[5].values()}
		}
		yyVAL.val = yyLocal
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		yyLocal := yyVAL.ins()
		{
			yyLocal = &Insert{Columns: yyDollar[2].columns(), Rows: yyDollar[4].selStmt()}
		}
		yyVAL.val = yyLocal
	case 552:
		yyDollar = yyS[yypt-6 : yypt+1]
		yyLocal := yyVAL.ins()
		{
			// Drop the redundant parenthesis.
			yyLocal = &Insert{Columns: yyDollar[2].columns(), Rows: yyDollar[5].selStmt()}
		}
		yyVAL.val = yyLocal
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.columns()
		{
			yyLocal = Columns{yyDollar[1].colIdent()}
		}
		yyVAL.val = yyLocal
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.columns()
		{
			yyLocal = Columns{yyDollar[3].colIdent()}
		}
		yyVAL.val = yyLocal
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.columns()
		{
			yyLocal = append(yyLocal, yyDollar[3].colIdent())
		}
		yyVAL.val = yyLocal
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.columns()
		{
			yyLocal = append(yyLocal, yyDollar[5].colIdent())
		}
		yyVAL.val = yyLocal
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.updateExprs()
		{
			yyLocal = nil
		}
		yyVAL.val = yyLocal
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
		yyLocal := yyVAL.updateExprs()
		{
			yyLocal = yyDollar[5].updateExprs()
		}
		yyVAL.val = yyLocal
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.values()
		{
			yyLocal = Values{yyDollar[1].valTuple()}
		}
		yyVAL.val = yyLocal
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.values()
		{
			yyLocal = append(yyDollar[1].values(), yyDollar[3].valTuple())
		}
		yyVAL.val = yyLocal
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.valTuple()
		{
			yyLocal = yyDollar[1].valTuple()
		}
		yyVAL.val = yyLocal
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.valTuple()
		{
			yyLocal = ValTuple{}
		}
		yyVAL.val = yyLocal
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.valTuple()
		{
			yyLocal = ValTuple(yyDollar[2].exprs())
		}
		yyVAL.val = yyLocal
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			if len(yyDollar[1].valTuple()) == 1 {
				yyLocal = &ParenExpr{yyDollar[1].valTuple()[0]}
			} else {
				yyLocal = yyDollar[1].valTuple()
			}
		}
		yyVAL.val = yyLocal
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.updateExprs()
		{
			yyLocal = UpdateExprs{yyDollar[1].updateExpr()}
		}
		yyVAL.val = yyLocal
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.updateExprs()
		{
			yyLocal = append(yyDollar[1].updateExprs(), yyDollar[3].updateExpr())
		}
		yyVAL.val = yyLocal
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.updateExpr()
		{
			yyLocal = &UpdateExpr{Name: yyDollar[1].colName(), Expr: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.setExprs()
		{
			yyLocal = SetExprs{yyDollar[1].setExpr()}
		}
		yyVAL.val = yyLocal
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.setExprs()
		{
			yyLocal = append(yyDollar[1].setExprs(), yyDollar[3].setExpr())
		}
		yyVAL.val = yyLocal
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.setExpr()
		{
			yyLocal = &SetExpr{Name: yyDollar[1].colIdent(), Expr: NewStrVal([]byte("on"))}
		}
		yyVAL.val = yyLocal
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.setExpr()
		{
			yyLocal = &SetExpr{Name: yyDollar[1].colIdent(), Expr: yyDollar[3].expr()}
		}
		yyVAL.val = yyLocal
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.setExpr()
		{
			yyLocal = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes())), Expr: yyDollar[2].expr()}
		}
		yyVAL.val = yyLocal
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.bytes()
		{
			yyLocal = []byte("charset")
		}
		yyVAL.val = yyLocal
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = NewStrVal([]byte(yyDollar[1].colIdent().String()))
		}
		yyVAL.val = yyLocal
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = NewStrVal(yyDollar[1].bytes())
		}
		yyVAL.val = yyLocal
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.expr()
		{
			yyLocal = &Default{}
		}
		yyVAL.val = yyLocal
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.byt()
		{
			yyLocal = 0
		}
		yyVAL.val = yyLocal
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.byt()
		{
			yyLocal = 1
		}
		yyVAL.val = yyLocal
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = ""
		}
		yyVAL.val = yyLocal
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.str()
		{
			yyLocal = IgnoreStr
		}
		yyVAL.val = yyLocal
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			yyLocal = struct{}{}
		}
		yyVAL.val = yyLocal
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = ColIdent{}
		}
		yyVAL.val = yyLocal
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = yyDollar[2].colIdent()
		}
		yyVAL.val = yyLocal
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = NewColIdent(string(yyDollar[1].bytes()))
		}
		yyVAL.val = yyLocal
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = NewColIdent(string(yyDollar[1].bytes()))
		}
		yyVAL.val = yyLocal
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.colIdent()
		{
			yyLocal = NewColIdent(string(yyDollar[1].bytes()))
		}
		yyVAL.val = yyLocal
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.tableIdent()
		{
			yyLocal = NewTableIdent(string(yyDollar[1].bytes()))
		}
		yyVAL.val = yyLocal
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.tableIdent()
		{
			yyLocal = NewTableIdent(string(yyDollar[1].bytes()))
		}
		yyVAL.val = yyLocal
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.tableIdent()
		{
			yyLocal = NewTableIdent(string(yyDollar[1].bytes()))
		}
		yyVAL.val = yyLocal
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
		yyVAL.val = yyLocal
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			decNesting(yylex)
		}
		yyVAL.val = yyLocal
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			forceEOF(yylex)
		}
		yyVAL.val = yyLocal
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			forceEOF(yylex)
		}
		yyVAL.val = yyLocal
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			forceEOF(yylex)
		}
		yyVAL.val = yyLocal
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		yyLocal := yyVAL.empty()
		{
			forceEOF(yylex)
		}
		yyVAL.val = yyLocal
	}
	goto yystack /* stack new state and value */
}
